{"version":3,"sources":["logger.ts","generator.ts","human.ts","humans.ts","existence.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AAEE,aAAA,MAAA,CAA2B,UAA3B,EAA8C;ACFhD,ADE6B,ICF7B,SDE6B,GCF7B,ODE6B,GAAA,GCF7B,ODE6B,KCF7B;AAIE,ADFkD,aCElD,SAAA,GAAA;AAHQ,ADGD,WAAA,ECHC,MAAA,CDGD,CAAA,CCHoB,EAAnB,ADGD,GAAP,UAAW,OAAX,EAA0B;ACFlB,ADGN,aCHM,WAAA,GAAsB,CAAtB;AAGN,ACLJ,AFMI,aCDK,IAAI,ADCA,ICDI,ADCb,CAAc,ECDd,EAAkB,KAAK,CAAvB,EAA0B,GAA1B,EAA+B,CDC/B,CAAiC,WAAjC,EAAiD,UAAO,IAAxD;ACAE,AINN,ALQI,YACE,KCHK,IDGI,ECHT,CAAY,CDGZ,CAAc,ECHd,CAAiB,KAAK,KAAL,CAAW,ADG5B,IACA,CCJiC,IDI5B,ECJuB,KAAgB,GAA3B,ADGjB,CCHA;AACD,ACLL,ACFA,AHWM,IETD,aAAL;ADMG,ACNH,AGAA,ALUM,CEVN,MGAO,IHAF,EGAL,ELUa,CKVG,QHAhB,EAAkB,AFUZ,EKVU,CLUW,OAAO,WAA5B,IACE,SAAS,IAAT,CAAc,YAAd,GAA6B,OAAO,YALxC,EAME;AIdN,AHUS,ACPP,ACFF,AEEE,ALYI,QKZE,MJOC,ICPP,KDOO,CAAA,CIPgB,OHAvB,MAAA,CDOO,GAAP,ACPA,CAAA,IAAA,IGAA,CJOuB,CCPvB,EDOA,EAAoC,GAApC,EAA+C;AAC7C,ACPF,AGAA,ALYI,aCLG,KCPP,CGAe,ELYF,GCLX,CDKE,CAAc,EKZlB,IHAA,OAAA,CFYI,CAA6B,EEZjC,CAAA,EFYI,EEZJ,OAAA;AEHF,AHWI,ACPF,ACIF,AEJC,ALYI,CKfL,GFOA,QFGQ,CEHR,IFGa,CCPX,QCIF,EFGQ,IAAoB,ACP1B,KDO+B,CEHjC,CDJE,IDO0B,ACP1B,CDOsC,ACPtC,IAAA,EDOE,EAA4C,GCP9C;ADQI,ACPL,ACMC,AHMC,CEhBH,EAAK,EFEI,QGQP,IFCS,EEDT,CAAmB,CDVhB,ODWC,GAAmB,CAAnB,KCXY,ACUhB,EDVG,ACUyC,CDV9C;AEAA,AHYK,ACNL,ACEU,AHTgB,IEO1B,OFP0B,CEO1B,CCEU,UAAA,AHTgB,EEO1B,CCEgC,AHTiB,EGSvC,CHTgB,QEO1B;ADOI,ACaF,ACfE,AHMJ,WAAA,CCJU,CCaR,ACfO,IHMT,CESE,CAAmB,OAAnB,CDbuB,CCaa,IDbR,GCa5B,EAAmD,CDb5B,AEFrB,CFEiC,AEFF,KFEO,WAAjB,CAArB,AEFA;ACEJ,AHCI,ACMK,ACRN,AHdH,CAAA,EAAA,CIeA,SFOS,EDNE,CGDX,IHCgB,CCMP,GAAmB,CDNjB,CAAW,GGDtB,CFOkC,WEPlC,AHCqC,CCM5B,EDNa,IAAsB,MAAM,GAA5B,CAAX,IAA+C,GAAtD;AGmBF,AHlBC,ACMM,ACPA,AHKF,IAAM,CCXJ,MEMA,ECmBP,AFZO,OCPA,CDOA,ACPA,CCmBP,EFZ0B,CEY1B,AFZO,KFFa,IGLb,AHKiB,GGLxB,GHKoB,CAAW,IAAX,CAAf,GGLL;ACgBQ,AHbD,ACKA,ACPL,aCeM,AFRD,CDLA,CEFE,CDOF,GAAc,CAAd,ACPO,GFEP,CAAA,GGaC,GAAyB,ADfxB,CCeD,ADfiB,MAAvB,GFEK,GAAP,YAAA;AGcQ,AHbN,ACKK,ACPN,KAFM,QCiBC,AFRD,EDLE,KAAK,CCKP,GEQC,AFRyB,GEQH,CAAtB,EFR+B,KDL9B,CAAqB,CAArB,EAAwB,ACKA,CAAgB,EDLxC,CAAP,CCKK;AEWL,AHfD,ACKM,ACNA,KFDA,MECA,ECgBA,AFVA,MEUL,CFVK,ACNA,CAAA,CCgBS,CFVU,IAAnB,WCNA,GCgBoB,ADhB3B,UCgBqC,EDhBrC,eCgBgB,CAAd;AACA,AHfJ,ACOI,ACRA,WFCJ,CEDU,EDQA,MDPV,GGeW,GAAP,CAAc,EDhBS,CDQvB,CAAuB,CEQJ,GFRnB,EAA6B,CEQf,CAAY,KFR1B,EAAsC,MEQxB,CFRd,IEQyC,mBAAzC;AACD,AHtCH,AC8BI,ACRE,CFtBN,EAAA,eEsBY,CADe;ACmBlB,AHhBF,ACOH,ACRE,IFCO,UGgBJ,AFTC,KCRG,CAFc,GCmBlB,CAAA,MFTL,CAAuB,EESlB,EFTL,CESF,AHhBuB,IAAI,QGgB3B,CHhBuB,EAAlB;AGiBH,AFTD,ACRG,aCiBG,MDjBI,QCiBT,GAAsB,OAAO,WAAP,CACpB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADoB,EAEpB,UAAU,QAFU,CAAtB;AAID,AFXM,ACbkB,KCmBlB,IDnBL,CDaK,SAAA,CAAA,OAAA,GAAP,YAAA;AEaQ,AFZN,ACTA,aDSK,ACTe,CCqBd,EFZN,CCToB,KAAA,CCqBd,ADrBc,CCqBd,CDrBc,KAAA,KAAK,ICqBnB,GAAR,GDrBE,EAAoB,KAAA,ECqBtB,CDrBsB,MAApB,EAAoB,IAApB,EAAmC;ACsBnC,AFZA,ACVK,aCsBA,AFZA,GCVM,IDUX,CEYA,EFZe,CCVC,GAAA,CDUI,CCVJ,CAAX,CDUU,GAAW,KAAK,QAA/B;AEaA,AFZA,ACVE,YCsBI,AFZF,ICVE,CDUG,GAAL,ECVQ,CDUG,IEYM,EFZA,CCVf,ECsBoB,GDtBD,GCsBJ,CAAY,AFZjC,EAAiC,OCVF,ICsBV,EAArB,GDtByB,CAAgB,IAAvC,EAA6C;ACuB/C,AFZE,ACVE,YCsBE,KFZC,OEYW,CFZhB,GAAgB,CEYK,EDtBJ,GDUK,CEYN,ADtBd,CCsB0B,OFZZ,CEYA,AFZgB,EEYlC,EFZE;AEaF,AFZC,ACVE,SDQH,GEcM,CDxBJ,EDYK,IAAI,ACVF,IAAI,CDUG,EEYI,CFZT,ECVQ,ECsBM,AFZF,MEYH,AFZS,ACVhB,CCsBmB,IDtBA,ICsBZ,EAApB,CFZO,EAAoC,ICVL,SAAN,CAAgB,KAAvC,EAA8C;ACuBvD,AFZE,ACVE,YCsBE,KFZC,QAAL,GAAgB,GCVC,ECsBQ,CFZH,ECVpB,ECsB4B,KFZd,CAAgB,KAAhC,WEYyB,EAA3B;AACA,AFZC,ACVE,SDQI,GEcD,CDxBG,EDYF,ICVE,IAAI,MAAM,MCsBU,EDtBhB,GCsBqB,EDtBF,CCsBH,CAC3B,KAAK,MAAL,ADvBoC,CCuBxB,QDvBkB,CAAgB,ICuB9C,CDvBO,EAA8C,ECuBvB,WAA9B,GAA4C,SAA5C,GAAwD,YAD7B,CAA7B;AAGA,AFdE,ACVE,aCwBC,IFdE,GEcP,CACE,IFfA,GAAgB,EEclB,CDxBmB,CC0BjB,EFhBsB,ECVpB,ODUc,CAAgB,KAAhC,CEcF,EAGE,cAAc,oBAHhB;AAKA,AFlBC,ACVE,aC4BE,UAAL;AACD,AFlBA,ACVE,KCaK,AFbD;AE8BC,AFlBM,ACXZ,UDWY,IEkBN,CD7BC,QC6BD,CAAA,KFlBM,ACXZ,EC6BM,CFlBR,EEkBA,QFlBkC,EEmBhC,IFnBF,EAAiD,GEkBjD,EAEE,CFpBF,EAA8D,QEkB9D,EAGE,SAHF,EAGmB;AAEjB,AFtBA,ACXD,KAhBM,OCiDC,AFtBA,eEsBe,EAArB,CFtBwB,MAAM,wBAAN,CAA+B,MAA/B,EAAuC,MAAvC,CAAxB;AEwBA,AFvBA,ACVK,WAAA,CDWH,KAAK,GAAL,ACXG,CDWM,ACXN,ODWa,QAAP,GAAkB,KCXxB,EDW+B,CCXtC,ODWI,KAA+C,ACXnD,MDWyD,oBADvD,EAEE;AEsBF,AFrBE,ACZF,YCiCI,ADjCA,KAAK,EDYA,QCZL,CCiCgB,ADjCA,ICiCpB,EAA0B,ADjCtB,GDYuB,ECZI,CAA/B,EAAkC,CDYD,oBAA/B;AEsBA,AFrBD,ACZC,SDQF,MAIO,ICZE,CAAP,KCiCa,IAAb,CAAkB,CAAA,iBAAK,SAAL,EAAiB,MAAjB,CAAwB,CAAxB,CAAlB;AACD,AFrBC,ACZD,SC+BD,ADjCA,MCmCO,ADjCA,IDYE,kBAAkB,MAAM,oBAA/B;AEsBA,AFrBD,ACZC,gBAAI,SCiCS,IAAb,CAAkB,CAAA,IDjCK,CCiCF,ADjCrB,YCiCiC,IAAf,GAAsB,SAAtB,EAAkC,MAAlC,CAAyC,CAAzC,CAAlB;AACD,AFrBF,ACZG,KDGU,YCHU,IAAA,KAAA,CAAA,EAAA,KAAA,KAAK,UAAzB,EAAoB,KAAA,GAAA,MAApB,EAAoB,IAApB,EAAmC;ACmCrC,AFrBa,ACdN,UDcM,UCdA,CCmCA,IAAb,CAAkB,CAAA,CDnCA,GAAA,EAAA,CDcL,ACdN,GDcT,OEqByB,GFpBvB,MEoBkB,AFrBpB,EEqBqC,AFnBnC,MEmBkB,AFrBpB,CEqB4C,CAAxB,AFnBL,CEmBb;AAEA,AFnBA,ACjBI,eDiBG,CAAC,OAAO,QAAP,GAAkB,ECjBF,KDiBS,CCjBH,ODiBvB,CCjBH,GDiByC,CAA7C;AEoBA,AFnBD,ACjBI,KDYU,OEwBP,aAAa,KAAK,MAAL,CAAY,aAAZ,EAAnB;AACA,AFlBF,AClBI,YCoCE,ODpCK,KCoCO,ADpCF,KAAL,CAAW,GCoCpB,EAA2B,cDpCY,KAAK,UAAL,CAAgB,MAA9C,CAAP;ACqCA,AFlBW,AClBZ,UDkBY,eEkBE,CFlBF,GEkBX,AFlBJ,CEkByB,SFjBvB,IEiBiC,CFlBnC,EAEE,KEgBE,EFlBJ,EAGE,OAHF,EAGiB;AEgBd,AFdD,ACtBD,KAVM,IC4CL,GFZI,GEcG,IAAI,WFdW,CEcC,KFdK,IEcrB,EAA2B,MFdlC;AEeE,AFdF,ACrBK,WAAA,CDqBD,QCrBC,CAAA,ICmCU,IAAb,CAAqB,CFdA,GCrBlB,EDqBD,CCrBN,GDqBkC,GEcC,MDnCnC,ECmCI,QFdiD,KAAnD,EAA0D;AEezD,AFdC,ACrBF,SCiCO,IDjCa,ECmCb,CFdC,CCrBY,KAAA,CAAA,EAAA,KAAA,IDqBM,CCrBD,KDqBO,KCrBhC,EAAoB,KAAA,GAAA,MAApB,EAAoB,CDqBM,CAA+B,ECrBzD,EAAmC,GDqBT,EAAwC,OAAxC,CAAxB;AEeA,AFdA,ACtBG,gBAAM,QAAK,CCoCD,EDpCC,ECoCd,ADpCc,CCoCO,AFdH,ACtBf,CDsBgB,MAAM,MEcM,MFdZ,EEcnB,CFdwC,eAAtB,IAAyC,CAA3D;AEeD,AFdA,ACtBC,kBAAM,OAAN;ACsCF,AFfA,ACtBC,YCqCK,AFfA,WAAW,GEeG,KAAK,MAAL,CAAY,MFfL,WEeP,EAApB,EFfiB,CAA0B,CAAC,EAA3B,EAA+B,EAA/B,CAAjB;AEgBA,AFfA,ACtBD,KAJM,SD0BC,OEeO,CFfb,GEeA,AFfiB,CEgBf,IFhBoB,GAAL,CAAS,CAAT,EAAY,KAAK,EEgB1B,GFhBqB,CAAW,QEgBpB,IAAlB,GAAsB,GFhBkC,QAA7B,CAAZ,CAAjB,EEgBE,GAA4B,YAAY,KAAxC,GAA6C,eAA7C,GAAmD,YAAY,KAA/D,GAAoE,GADtE;AAIA,AFlBD,ACrBM,KDSQ,MCTR,CCuCC,QDvCD,CAAA,SCuCmB,KAAK,EDvCxB,GAAP,CCuC0B,CAAY,QDvCd,SAAxB,EAAyC,ICuCf,EAAxB;AAEA,AFlBa,ACtBb,UDsBa,GCtBR,IAAI,ICwCI,ADxCA,ICwCb,CAAkB,AFlBL,GAAf,CCtBE,EAAwB,KAAK,CAA7B,CDsB8B,CCtBE,GCwCT,ADxCvB,CDsBF,CCtBuC,CDsBK,YEkB1C;AAEA,AFnBA,ACtBE,cDsBI,ECtBE,MDsBR,GAAiB,KAAK,KAAL,ACtBU,CDuBzB,ICvB8B,UAAL,CAAgB,MDuB/B,ACvBV,eDuBA,CAA0B,CAA1B,EAA6B,MAAM,MAAnC,KAA8C,MAAM,QAAN,GAAiB,GAA/D,CADe,CAAjB;AEoBA,AFjBA,ACxBE,gBAAM,OCyCD,GAAP,CAAW,GDzCW,GCyCP,EDzCY,GCyCP,EDzCE,CAAW,KAAK,GCyC3B,GAAoB,ADzCE,GCyCtB,EDzCsC,CCyCd,aAAa,EDzC1B,CAApB,CCyCiC,CAAkB,GAAlB,CAAnC;AACD,AFjBC,ACxBE,KCII,SFoBA,GCxBC,IDwBP,GAAgB,GCxBd,CAAgB,EDwBI,GAAN,GAAY,GCxB1B,GDwBgC,CCxBD,KAAK,EDwBtC,QCxBiC,CAAgB,mBAAmB,CAAnC,CAA/B;AC2CI,AFlBP,ACxBG,KDkBW,SEwBP,GD1CC,MC0CD,CAAA,GD1CJ,CAAgB,GAAhB,CC0CI,GAAR,YAAA;AACE,AF/FqB,ACqDpB,UDrDoB,GE+FhB,MF/FgB,GAAY,EE+FjC,WF/FqB;AEgGrB,AF/FF,ACqDC,KAPM,QCiDA,MAAL,CAAY,aAAZ;AACD,AF/FsB,ACsDhB,KCsCC,KF5Fe,CCsDhB,SAAA,CAAA,IDtDgB,GAA0B,CCsD1C,CDtDgB,CAHzB,CAGuD,ACsDrD,YAAA;AC2CA,AFhGA,ACsDE,YAAM,wBAAwB,KAAK,UAAL,CAAgB,MAA9C;AC2CM,AFhGe,ACsDrB,UDtDqB,IEgGf,EFhGe,GAAiB,GAAjB,CEgGf,CAAA,sBAAA,GAAR,YAAA;AACE,AFhGF,ACsDE,aAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,KAAD,EAAa;AC2CtD,AFhGqB,ACsDnB,UDtDmB,EEgGjB,OD1CK,CDtDY,EEgGP,CFhG4B,EAArB,ACsDN,OAAb,EC0CE,CAAuB,MAAvB,IAAiC,qBAAU,gBAAV,EAArC,EAAmE;AACjE,AFhGJ,ACsDG,SAFiB,CAAlB,MC4CQ,cAAc,KAAK,oBAAL,EAApB;AACA,AFhGmB,ACsDrB,UDtDqB,KCsDd,EC0CA,KFhGc,CEgGnB,CAAY,CFhG8B,EAAvB,YCsDU,CC0C7B,CACE,GD3CgC,EC2C3B,MAAL,CAAY,CD3Ce,CAAgB,MAA/C,KC2CI,MAA+B,YAAY,cAAZ,GAA6B,IAA5D,CADF;AAGA,AFlGJ,ACsDC,KAPM,cCmDI,WAAP;AACD,AFlGqB,ACuDjB,SCqCL,CF5FsB,CCuDjB,IC2CE,KD3CF,CAAA,CDvDiB,GAAuB,EAAvB,CAX1B,CAWqD,ACuD5C,GAAP,YAAA;AC4CI,AFlGoB,ACuDtB,UDvDsB,ECuDlB,OC2CK,IAAP,CD3Cc,CAAhB,KDvDsB,GAA+B,EAA/B,CAZ1B,CAY6D;AEmGxD,AFjCL,ACTI,WDSJ,CCTQ,IDSR,CCTa,UAAL,CAAgB,MAAhB,IAA0B,CAA9B,EAAiC;AC2ClC,AFhHH,ACsEM,CDtEN,EAAA,EEqGU,cD/BG,SAAP;AC4CI,AD3CL,QDvEQ,CCqET,KC6CM,CD3CC,CDvEE,OEkHH,CAAA,UAAA,GAAR,YAAA;AACE,AD3CE,YC2CE,KAAK,AD3CF,IAAI,EC2CP,CAAY,CD3CD,KAAK,OC2ChB,GD3CW,CAAgB,GC2CK,CAApC,EAAuC,AD3CxB,GAAyB,CAAtC,EAAyC,KAAK,CAA9C,EAAiD,GAAjD,EAAsD;AC4CtD,AD3CE,mBC2CK,CD3CC,QAAQ,IC2ChB,CAAqB,AD3CA,KC2CK,KD3CV,CAAgB,CAAhB,CAAd,MC2CF;AACA,AD3CE,oBAAM,OC2CD,AD3CQ,GC2Cf,CAAW,CD3CS,cAAL,EAAb,CC2CF;AACD,AD3CG,SCwCJ,MAGO,IAAI,CD3CH,IC2CQ,CD3CH,KC2CF,CAAY,QD3Cf,CAAoB,IC2CjB,CD3CH,EAA2B,GC2CO,CD3ClC,CAAJ,EAAsC,MC2CU,gBAA7C,EAA+D;AACpE,AD3CI,mBC2CG,KD3CG,OAAO,CC2CjB,CAAqB,KAAK,UD3CC,IC2C3B,CD3CiB,EAAiB,IAAjB,CAAb;AC4CJ,AD3CI,yBAAK,EC2CF,GAAP,CACE,ID5CE,CAAgB,IAAhB,CAAqB,IAArB,gBC6CA,UAAU,gBADZ,GAC4B,qBAF9B;AAKD,AD/CK;ACgDP,AD/CM,KCmCC;AAcA,ADhDH,cCgDG,SAAA,CAAA,oBAAA,GAAR,YAAA;AACE,ADhDC,eCgDM,UAAU,YAAV,CACL,qBAAU,eAAV,CAA0B,CAA1B,EAA6B,UAAU,YAAV,CAAuB,MAAvB,GAAgC,CAA7D,CADK,CAAP;AAGD,ADlDC,KC8CM,UD9CC,SAAP;AC1EF,AD2EC,KAjBM;ACzDiB,AD4EhB,WAAA,GC5EgB,MD4EhB,CAAA,UC5EgB,GAA4B,CD4E5C,GC5EgB,AD4ExB,UAAuB,MAAvB,EAAsC,MAAtC,EAAmD;AC3E3B,AD4EtB,YACE,EC7EoB,KD6Eb,QAAP,GC7EoB,ED6EA,CC7E2B,OAA3B,KD6EM,SAAN,CAAgB,KAApC,IACA,OAAO,QAAP,KAAoB,aAAM,SAAN,CAAgB,KAFtC,EAGE;AC9EoB,AD+EpB,cC/EoB,ED+Ed,MC/Ec,GAAmB,ID+EpB,EC/E0B,IAAzB,CAJ1B,CAIyD,KD+E1B,mBAAN,CAA0B,MAA1B,EAAkC,MAAlC,CAAnB;AC7EoB,AD8EpB,cC9EoB,KD+ElB,OC/EkB,GAA+B,CACrD,EAAE,CD8EgB,KC9EV,IAAR,EAAc,UD8Ec,MC9EE,EAA9B,EADqD,EAErD,EAAE,ED6EgB,EAAd,EC7EI,ED8EJ,EC9EJ,EAAc,SD8EJ,OC9EoB,EAA9B,EAFqD,EAGrD,EAAE,AD6EE,IAAyB,EC7ErB,IAAR,EAAc,aD6EyB,GC7ET,EAA9B,EAHqD,EAIrD,EAAE,KD4E2B,CC5ErB,CD0EN,GC1EF,EAAc,gBAAgB,EAA9B,EAJqD,EAKrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EALqD,EAMrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EANqD,EAOrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,CAA9B,EAPqD,CAA/B;AAwH1B,ADtCK,SATD,EC+CJ,IDtCW,KCsCX;AA9HA,ADyFM,CCzFN,EAAA,gBDyFa,KAAP;AACD,QC1FQ,YAAA;AD2FV,KAbO;AAeA,WAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,iBAAlC,EAA2D;AACzD,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,iBAApB,EAAuC,GAAvC,EAA4C;AAC1C,iBAAK,UAAL,CAAgB,IAAhB,CAAqB,kBAArB;AACD;AACF,KAJO;AAMA,WAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AACE,eAAO,KAAK,UAAL,CACL,qBAAU,eAAV,CAA0B,CAA1B,EAA6B,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAtD,CADK,CAAP;AAGD,KAJO;AAKV,WAAA,MAAA;AA9GA,CAAA,EAAA","file":"src.6a5cef73.map","sourcesContent":["class Logger {\n  private static readonly safetyOffset: number = 100;\n  public constructor(private autoScroll: boolean) {}\n\n  public log(message: string): void {\n    // insertAdjacentHTML seems to be a bit faster than appendChild\n    document.body.insertAdjacentHTML(\"beforeend\", `${message}\\n`);\n\n    if (\n      document.body.scrollIntoView &&\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >=\n        document.body.offsetHeight - Logger.safetyOffset\n    ) {\n      // false means to the bottom of the element\n      document.body.scrollIntoView(false);\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","class Generator {\n  private lookup: number[] = [];\n  private lookupIndex: number = 0;\n\n  public constructor() {\n    for (let i = 1e6; i >= 0; i--) {\n      this.lookup.push(Math.round(Math.random() * 100));\n    }\n  }\n\n  public getRandomNumber(min: number, max: number): number {\n    this.lookupIndex++;\n    if (this.lookupIndex >= this.lookup.length) {\n      this.lookupIndex = 0;\n    }\n    const randomNumber = this.lookup[this.lookupIndex];\n    return Math.floor(randomNumber / 100 * (max - min)) + min;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nenum HumanAgeGroup {\n  Baby = 0,\n  Adult = 1,\n  Elder = 2\n}\n\nexport class Human {\n  public static readonly ageGroups = HumanAgeGroup;\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30; // %\n  // https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people\n  public static readonly maxAge: number = 122;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  public static readonly pubertyAge: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  public static readonly menopauseAge: number = 72;\n  // we base on Classical Rome period: https://en.wikipedia.org/wiki/Life_expectancy\n  private static readonly baseVitality: number = 47; // %\n  private static readonly similarityLoveFactor: number = 10; // %\n\n  public vitality: number = Human.baseVitality;\n  public lifespan: number = 1;\n  public age: number = 0;\n  public ageGroup: HumanAgeGroup = Human.ageGroups.Baby;\n  public isAlive: boolean = true;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    Human.generateVitality(this, parent1, parent2);\n    // lifespan uses vitality, so should be called last\n    Human.generateLifespan(this);\n  }\n\n  public bumpAge(): void {\n    this.age++;\n    this.isAlive = this.age < this.lifespan;\n    if (this.age < Human.pubertyAge) {\n      this.ageGroup = Human.ageGroups.Baby;\n    } else if (this.age >= Human.menopauseAge) {\n      this.ageGroup = Human.ageGroups.Elder;\n    } else {\n      this.ageGroup = Human.ageGroups.Adult;\n    }\n  }\n\n  public static calculateLoveChance(human1: Human, human2: Human): number {\n    const averageVitality = Human.calculateAverageVitality(human1, human2);\n    if (\n      Math.abs(human1.vitality - human2.vitality) >= Human.similarityLoveFactor\n    ) {\n      return averageVitality - Human.similarityLoveFactor;\n    } else {\n      return averageVitality + Human.similarityLoveFactor;\n    }\n  }\n\n  private static calculateAverageVitality(\n    human1: Human,\n    human2: Human\n  ): number {\n    return (human1.vitality + human2.vitality) / 2;\n  }\n\n  // sets non-negative number\n  private static generateVitality(\n    human: Human,\n    parent1?: Human,\n    parent2?: Human\n  ): void {\n    let geneticVitality = Human.baseVitality;\n    if (parent1 instanceof Human && parent2 instanceof Human) {\n      const parentsVitality = Human.calculateAverageVitality(parent1, parent2);\n      geneticVitality = (Human.baseVitality + parentsVitality) / 2;\n    }\n    const mutation = generator.getRandomNumber(-20, 20);\n    human.vitality = Math.max(0, Math.round(geneticVitality + mutation));\n  }\n\n  private static generateLifespan(human: Human): void {\n    human.lifespan = Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * (human.vitality / 100)\n    );\n    // check if not born dead\n    human.isAlive = human.age < human.lifespan;\n  }\n}\n","import { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\ninterface IAgeGroupsCount {\n  baby: number;\n  adult: number;\n  elder: number;\n}\n\nexport class Humans {\n  private population: Human[] = [];\n\n  public constructor(initialPopulation: number) {\n    this.generateInitialPopulation(initialPopulation);\n  }\n\n  public getTotalCount(): number {\n    return this.population.length;\n  }\n\n  public getAgeGroupsCount(): IAgeGroupsCount {\n    const ageGroupsCount = {\n      baby: 0,\n      adult: 0,\n      elder: 0\n    };\n    for (const human of this.population) {\n      if (human.ageGroup === Human.ageGroups.Baby) {\n        ageGroupsCount.baby++;\n      } else if (human.ageGroup === Human.ageGroups.Adult) {\n        ageGroupsCount.adult++;\n      } else if (human.ageGroup === Human.ageGroups.Elder) {\n        ageGroupsCount.elder++;\n      }\n    }\n    return ageGroupsCount;\n  }\n\n  public getTotalAverageVitality(): number {\n    if (this.population.length === 0) {\n      return 0;\n    } else {\n      let totalVitalitySum = 0;\n      for (const human of this.population) {\n        totalVitalitySum += human.vitality;\n      }\n      return Math.round(totalVitalitySum / this.population.length);\n    }\n  }\n\n  public growByOneYear(): void {\n    for (const human of this.population) {\n      human.bumpAge();\n    }\n  }\n\n  public killRandomHumans(killCount: number): void {\n    for (let i = killCount; i >= 0; i--) {\n      const populationLength = this.population.length;\n      const randomIndex = Math.floor(Math.random() * populationLength);\n      this.population[randomIndex] = this.population[populationLength - 1];\n      this.population.pop();\n    }\n  }\n\n  public buryDead(): number {\n    const populationCountBefore = this.population.length;\n    // keep only alive people in population\n    this.population = this.population.filter((human: Human): boolean => {\n      return human.isAlive;\n    });\n    return populationCountBefore - this.population.length;\n  }\n\n  public makeLove(): number {\n    let bornCount = 0;\n\n    if (this.population.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.population.length - 1; i >= 0; i--) {\n        const human = this.population[i];\n        const mate = this.getRandomHuman();\n        if (this.isLoveFruitful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.population.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private isLoveFruitful(human1: Human, human2: Human): boolean {\n    if (\n      human1.ageGroup === Human.ageGroups.Adult &&\n      human2.ageGroup === Human.ageGroups.Adult\n    ) {\n      const loveChance = Human.calculateLoveChance(human1, human2);\n      return (\n        loveChance >= generator.getRandomPercent() &&\n        Human.pregnancyChance >= generator.getRandomPercent()\n      );\n    } else {\n      return false;\n    }\n  }\n\n  private generateInitialPopulation(initialPopulation: number): void {\n    for (let i = 0; i < initialPopulation; i++) {\n      this.population.push(new Human());\n    }\n  }\n\n  private getRandomHuman(): Human {\n    return this.population[\n      generator.getRandomNumber(0, this.population.length - 1)\n    ];\n  }\n}\n","import { logger } from \"./logger\";\nimport { Humans } from \"./humans\";\nimport { generator } from \"./generator\";\n\ndeclare global {\n  interface String {\n    padEnd(maxLength: number, fillString?: string): string;\n  }\n}\n\ninterface ICatastrophe {\n  type: string;\n  killPercentage: number;\n}\n\nexport class Existence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4129;\n  private static readonly targetPopulation: number = 1000000;\n  private static readonly yearTime: number = 0.2 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    { type: \"🤢\", killPercentage: 40 },\n    { type: \"☄️\", killPercentage: 35 },\n    { type: \"🌋\", killPercentage: 30 },\n    { type: \"🌊\", killPercentage: 25 },\n    { type: \"❄️\", killPercentage: 20 },\n    { type: \"🏜\", killPercentage: 10 },\n    { type: \"🌪\", killPercentage: 5 }\n  ];\n\n  private humans: Humans;\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.humans = new Humans(Existence.initialPopulation);\n    logger.log(`${this.humans.getTotalCount()} humans appeared.`);\n  }\n\n  public startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      Existence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const initialCount = this.humans.getTotalCount();\n    const bornCount = this.humans.makeLove();\n    const buriedCount = this.humans.buryDead();\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.getTotalCount() + buriedCount - bornCount - initialCount\n    );\n    this.logYear(\n      bornCount,\n      appliedCatastrophe,\n      buriedCount + catastropheDeadCount\n    );\n    this.checkGoals();\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    const messageParts = [];\n\n    // births and deaths\n    if (catastrophe === null) {\n      messageParts.push(`⚰️${deadCount}`.padEnd(6));\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`.padEnd(6));\n    }\n\n    messageParts.push(`🤱${bornCount}`.padEnd(6));\n\n    // current population\n    const totalCount = this.humans.getTotalCount();\n    if (deadCount > bornCount) {\n      messageParts.push(`${totalCount}↓`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`${totalCount}↑`);\n    } else {\n      messageParts.push(`${totalCount}–`);\n    }\n\n    const groupsCount = this.humans.getAgeGroupsCount();\n    messageParts.push(\n      `{👶${groupsCount.baby} 👩${groupsCount.adult} 👵${groupsCount.elder}}`\n    );\n\n    const averageVitality = this.humans.getTotalAverageVitality();\n\n    messageParts.push(`💓${averageVitality}`);\n\n    // final message\n    logger.log(`y${this.currentYear} ${messageParts.join(\" \")}`);\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    this.humans.growByOneYear();\n  }\n\n  // kills 20-80% of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (Existence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      this.humans.killRandomHumans(\n        this.humans.getTotalCount() * (catastrophe.killPercentage * 0.01)\n      );\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.getTotalCount() === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.getTotalCount() >= Existence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          Existence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return Existence.catastrophes[\n      generator.getRandomNumber(0, Existence.catastrophes.length - 1)\n    ];\n  }\n}\n","import { Existence } from \"./existence\";\n\nwindow.onload = (): void => {\n  const humanExistence = new Existence();\n  humanExistence.startLife();\n};\n"]}