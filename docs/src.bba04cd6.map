{"version":3,"sources":["logger.ts","generator.ts","human.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AAAA,aAAA,MAAA,GAAA;ACAA,ADEU,ICFV,SDEU,GCFV,KDEU,GAAwB,KCFlC,IDE2C,QCF3C,KDEkC,CAAuB,KAAvB,CAAxB;ACFV,AEAA,AHwBC,aCxBD,SAAA,GAAA,CAUC;AATQ,ADGA,WAAA,GCHA,MDGA,CAAA,ECHA,CAAA,ADGA,GAAP,UAAW,ECHJ,EDGP,CCHA,CDGoB,SCHG,GAAvB,EAAoC,GAApC,EAA+C;AAC7C,AEDJ,AHII,YCHM,ADGF,UAAU,IAAd,CCHqB,IAAI,WAAJ,CAAgB,CAAhB,CAArB;AACA,ACHJ,AFMI,YAAI,GCHG,IDGI,ECHX,CAAc,CDGV,KAAgB,QAApB,CCHA,CAA8B,ADGA,YCH9B;AACA,AEFJ,AHKM,YCHI,UDGM,KCHS,ADGJ,SAAL,CAAe,GCHO,CAAb,ADGT,CAAV,ICHsC,aAAa,CAAhC,CAArB;AAEA,ACJJ,AFMK,IENL,QDIU,ACJV,UDIoB,GCJpB,EDIyB,IAAL,CAAU,GAAV,CAAhB,CCJJ;ADKI,ACIF,ACPF,AHMI,IGNJ,QFGU,ADGF,CECN,IFDW,CECX,CAAmB,ECPrB,EFGqB,EDGb,EAAJ,CCHsB,CDGD,ICHJ,CAAW,AEHhC,GFGqB,ACInB,CDJE,CCIiE,OCPrE;AFII,ACGiB,ACInB,AHJI,YEAe,CCInB,EFPS,EDGA,GCHK,KAAL,ADGL,CCHgB,ADGF,CGIlB,GAAA,KDJmB,AFAf,IAA2B,CEAZ,CAAA,CDHiB,CCGjB,GFAiB,OCHW,ADG3C,OCHgC,GAAqB,CAArC,CAAX,IAAsD,OAA7D;AACD,ACEkB,ACAX,AHCL,KCXI,QEUC,MAAA,GAAkB,EAAlB,SDAwC,MAAM,aAAnC;ADDrB,ACCqE,ACC3D,AHCP,KATM,MCMT,EEEU,OFFV,OEEU,GAAyB,CAAzB;AFZV,ACKS,ACQC,AHEA,CCfV,EAAA,QDeU,EEVD,ACQC,GDRD,GAAc,CAAd,AFUC,CAAA,GGFA,GAAsB,CAAtB,CHEA,GAAR,YAAA;ACHK,ACAH,ACIA,AHAA,ICJS,QDIL,CEJC,ACIA,QHAQ,CEJb,GAAiB,KAAK,KFIlB,CCJiB,ADIO,EGA5B,EFJyB,GDIU,IEJlB,CAAuB,CDAnB,EAAlB,ADIC,CAAJ,EAA8C,YEJ7B,CAAjB;AACA,ACIA,AHAE,aEJG,ACIA,MHAI,EEJT,CCIA,CHAE,CEJc,KAAK,gBAAL,EAAhB;AACD,ACIA,AHAE,SAFD,MAEO;AEFF,ACIC,AHDJ,UEHG,OFGE,EEHF,ACIC,CDJD,KFGH,CAAc,CEHX,CCIC,AHDJ,CGCI,CDJR,CFGuB,OAAO,IEH9B,IFGI,QGCI,GAAR,YAAA;ADHE,ACIA,AHDE,aEHG,ACIA,GDJL,CCIS,IAAI,AHDF,CGCX,EAAgB,CHDd,CAAc,EGCI,SHDlB,CAA0B,KGCO,AHDF,QAA/B,SGCF,EAAsD,GAAtD,EAA2D;ADH5D,ACIG,AHDA,KELG,YCME,EHDE,IGCP,AHDA,CGCY,IAAZ,CAAiB,kBAAjB;ADFG,ACGJ,AHDA,UEFI,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,ACGA,AHDD,KARO,UEMC,KAAK,GAAL,ACGA,GAAP,CDHmB,ACGR,KDHa,QAAxB,ICG0B,KAAK,MAAL,CAAY,MAA3B,GAAiC,UAA5C;ADFD,ACGA,AHxBuB,KEmBjB,ACAC,MHnBgB,QAAA,GAAW,QAAX;AEuBjB,ACGC,AHHV,UEAS,CFAT,MAAA,EEAS,ACGC,CDHD,OAAA,CCGC,CAAA,CDHR,QCGQ,GAAR,CDHA,WCGA;ADFE,ACGA,AH5BJ,CAAA,EAAA,UG4BS,EDHE,KAAK,GAAL,IAAY,ACGnB,GAAsB,GDHG,ICGI,WDH7B,ACGsB,CACpB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADoB,EAEpB,eAAe,QAFK,CAAtB;ADFD,ACMA,AHNI,IAAM,CEFJ,ACGC,yBHDY,IAAI,MAAJ,EAAf;AEEL,ACMQ,mBAAA,SAAA,CAAA,eAAA,GAAR,YAAA;ADLQ,ACMN,UDNM,GCMD,MDNC,CAAA,CCMN,gBDNM,GAAR,UAA0B,kBAA1B,EAAoD;AAClD,ACMA,YDNM,ACMA,YDNY,CAAC,KCMK,KAAK,QAAL,EAAxB,CDNwC,MAAM,aAA5B,IAA6C,CAA/D;AACA,ACMA,YDNM,ACMA,WDNW,CCMC,KAAK,QAAL,EAAlB,KDN2B,eAAV,CAA0B,CAAC,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","file":"src.bba04cd6.map","sourcesContent":["class Logger {\n  private static readonly loggerId = \"logger\";\n  private loggerEl: HTMLElement = document.createElement(\"pre\");\n\n  public log(data: any): void {\n    let message = data;\n    if (typeof data !== \"string\") {\n      message = JSON.stringify(data);\n    }\n\n    if (this.verifyEl()) {\n      this.loggerEl.innerText += `\\n${message}`;\n    }\n  }\n\n  private verifyEl(): boolean {\n    if (document.getElementById(Logger.loggerId)) {\n      return true;\n    } else {\n      this.loggerEl.id = Logger.loggerId;\n      document.body.appendChild(this.loggerEl);\n      return true;\n    }\n  }\n}\n\nexport const logger = new Logger();\n","class Generator {\n  public getRandomNumber(min: number, max: number): number {\n    const randomBuffer = new Uint32Array(1);\n    window.crypto.getRandomValues(randomBuffer);\n    const randomNumber = randomBuffer[0] / (0xffffffff + 1);\n\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    return Math.floor(randomNumber * (maxFloor - minCeil + 1)) + minCeil;\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nexport class Human {\n  public mortality: number;\n  public lifespan: number;\n  public age: number = 0;\n\n  private static readonly baseMortality: number = 0.5;\n  private static readonly maxAge: number = 120;\n  private static readonly reproductionAge: number = 15;\n\n  public constructor(inheritedMortality: number = Human.baseMortality) {\n    this.mortality = this.generateMortality(inheritedMortality);\n    this.lifespan = this.generateLifespan();\n  }\n\n  public bumpAge(): void {\n    this.age++;\n  }\n\n  public isDead(): boolean {\n    return this.age >= this.lifespan;\n  }\n\n  public isAdult(): boolean {\n    return this.age >= Human.reproductionAge;\n  }\n\n  // returns non-negative number\n  private generateMortality(inheritedMortality: number): number {\n    const inherited = (inheritedMortality + Human.baseMortality) / 2;\n    const mutation = generator.getRandomNumber(-1, 1) / 10;\n    const mutatedMortality = inherited + mutation;\n    if (mutatedMortality >= 0) {\n      return parseFloat(mutatedMortality.toFixed(2));\n    } else {\n      return 0;\n    }\n  }\n\n  private generateLifespan(): number {\n    return Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * this.mortality\n    );\n  }\n}\n","import { logger } from \"./logger\";\nimport { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\nclass HumanExistence {\n  private static readonly initialPopulation: number = 100;\n  private static readonly targetPopulation: number = 10000;\n  private static readonly yearTime: number = 0.1 * 1000; // seconds\n  private static readonly loveChance: number = 25;\n  private static readonly catastropheChance: number = 5;\n\n  private humans: Human[] = [];\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.generateInitialPopulation();\n    this.startLife();\n  }\n\n  private generateInitialPopulation(): void {\n    for (let i = 0; i < HumanExistence.initialPopulation; i++) {\n      this.humans.push(new Human());\n    }\n    logger.log(`God created ${this.humans.length} humans.`);\n  }\n\n  private startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      HumanExistence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const oldAgeDeadCount = this.buryDead();\n    const bornCount = this.makeLove();\n    const catastropheDeadCount = this.applyRandomCatastrophicEvent();\n\n    let message =\n      `Year ${this.currentYear}:` +\n      ` ☠️ ${oldAgeDeadCount + catastropheDeadCount},` +\n      ` 👶 ${bornCount},` +\n      ` 🌍 ${this.humans.length}`;\n\n    if (catastropheDeadCount > 0) {\n      message += \" 🌋\";\n    }\n\n    logger.log(message);\n    this.checkGoals();\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    for (const human of this.humans) {\n      human.bumpAge();\n    }\n  }\n\n  private makeLove(): number {\n    let bornCount = 0;\n\n    if (this.humans.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.humans.length - 1; i >= 0; i--) {\n        const human = this.humans[i];\n        const mate = this.getRandomHuman();\n        if (\n          generator.getRandomNumber(0, 100) <= HumanExistence.loveChance &&\n          human.isAdult() &&\n          mate.isAdult()\n        ) {\n          const child = new Human((human.mortality + mate.mortality) / 2);\n          this.humans.push(child);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private buryDead(): number {\n    let diedCount = 0;\n    for (let i = this.humans.length - 1; i >= 0; i--) {\n      if (this.humans[i].isDead()) {\n        const deadBody = this.humans.splice(i, 1);\n        diedCount++;\n      }\n    }\n    return diedCount;\n  }\n\n  // always takes greater half of population (if happens)\n  private applyRandomCatastrophicEvent(): number {\n    if (generator.getRandomNumber(0, 100) <= HumanExistence.catastropheChance) {\n      const halfMark = Math.floor(this.humans.length * 0.5);\n      const died = this.humans.slice(0, halfMark);\n      this.humans = this.humans.slice(halfMark, this.humans.length - 1);\n      return died.length;\n    } else {\n      return 0;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.length === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.length >= HumanExistence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          HumanExistence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getRandomHuman(): Human {\n    return this.humans[generator.getRandomNumber(0, this.humans.length - 1)];\n  }\n}\n\nconst humanExistence = new HumanExistence();\n"]}