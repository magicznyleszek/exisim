{"version":3,"sources":["logger.ts","generator.ts","human.ts","humans.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AAEE,aAAA,MAAA,CAA2B,UAA3B,EAA8C;ACFhD,ADE6B,ICF7B,SDE6B,GCF7B,ODE6B,GAAA,GCF7B,ODE6B,KCF7B;AAAA,ADEoD,aCFpD,SAAA,GAAA,CAWC;AAVQ,ADGA,WAAA,GCHA,MDGA,CAAA,ECHA,CAAA,ADGA,GAAP,UAAW,ECHJ,GAAP,EDGA,EAA0B,MCHH,GAAvB,EAAoC,GAApC,EAA+C;AAC7C,AGFJ,AJKI,YCHM,KDGG,IAAT,CCHgB,ADGF,KCHO,IAAL,CAAU,CDG1B,CAA0B,CCHV,CAAhB,ODGmC,cAAT,CAA2B,UAAO,IAAlC,CAA1B;ACFA,ACHJ,AFOI,YCJM,ADKJ,KAAK,MCLU,IDKf,CCLoB,KAAL,CAAW,GAAX,CAAjB;AACA,AGHJ,AJQM;ACJF,ACHJ,ACFA,AHUM,IERD,WDGM,ADKE,EERb,GDGgB,KAAL,CAAW,ADKhB,GAAqB,ECLA,KDKO,CCLZ,MAAiB,IDKjC,IACE,GCN0C,MDMjC,CCNsB,GAAqB,ADMpD,CCNc,ADMA,CCNX,IAAuD,OAA9D,ADMI,GAA6B,OAAO,YAJxC,EAKE;ACNH,ACJH,AEAA,AJWM,CEXN,IDDS,MCCJ,aAAL,EAAkB;ADMT,ACLP,ACFF,AHaM,cCNG,ICLP,GFWa,ECNN,CAAA,CDMH,CAAc,MEXlB,MAAA,EDKO,ADMH,CAA6B,CEXjC,CDKA,ACLA,GFWI,CEXJ,MAAA,EDKA;AACE,ACLF,AEWF,AJAK,IIAL,WHNW,GCLT,EDKc,CGMhB,WFXE,EEWF,CHNW,CAAqB,CAArB,EAAwB,ACLjC,GDKS,CAAP,ACLF,CAAA,EEWF,EFXE,OAAA;ADMC,ACLD,ACIF,AC0BE,AJnBC,IGPH,CFDS,ADJA,QGKT,AC0BE,KF9BA,QCIF,CC0BE,GAAA,EF9BA,MCIF,CDJE,IAAA,CAAA,IAAA,OAAA;ADMF,ACLC,ACMC,ACoBQ,AJ/BgB,CEC1B,EAAK,QDSL,ADV0B,EGWxB,ACoBQ,MDpBR,CFDF,AECqB,CDVhB,EFDqB,GAAuB,CI+BvC,EJ/BgB,CI+BS,CAAzB,MF9BQ,ACUhB,EDVG,ACUyC,CDV9C;ADFA,ACQA,ACEU,ACuBA,AJhBV,CCjBA,EAAA,CCQA,OFSA,CETA,CCEU,ACuBA,IJhBV,MGPU,CCuBA,CFzBV,CCEgC,CCuBA,CDvBtB,ACuBA,SFzBV;ADKO,ACcL,ACdE,ACuBA,AJpCJ,CAAA,EAAA,CCaa,SCcX,ACdO,ACuBA,KFTP,CAAmB,AESjB,GAAc,IFThB,EAAoC,OAApC,CDduB,CCc4B,CCdjD,CAA+B,CFAN,CGuBA,QHvBJ,EAAlB,KEAH,ACuBwC,iBAA1B,CAAd;AFfK,ACPN,ACuBC,AJlBG,IAAM,SEEJ,QAAA,EEgBE,CFhBiB,EEgBxB,CAAc,GFhBgB,AFFZ,EIkBC,EJlBG,IIkBR,CAAY,CJlBR,CAAW,CEExB,GFFa,CAAf,MIkBW,KAA2B,mBAAzC;AFfK,ACNA,ACuBL,WDvBK,EDMA,AEiBA,ODvBA,CDMA,ACNA,CCuBL,EFjBwB,CAAnB,SCNA,GAAP,YAAA;ADOO,ACNL,ACuBD,aFjBM,ECNE,CDMF,GAAc,CAAd,ACNO,UAAL,CAAgB,MAAvB;ADOK,ACNN,ACwBO,KD1BD,QDQA,MEkBC,EFlBD,GAA0B,IEkBzB,CAAA,CFlB+B,QEkB/B,CFlByB,CAAgB,CEkBjD,GFlBO,SEkBP;AFjBO,ACLA,ACuBL,WDvBK,EDKA,AEkBA,OFlBA,ACLA,CAAA,EDKmB,IAAnB,AEkBL,GAAsB,OAAO,CDvBxB,GAAP,OCuBwB,CACpB,IDxBJ,CCwBS,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADoB,EAEpB,eAAe,QAFK,CAAtB;AFfA,ACPA,AC0BD,KALO,ODrBA,EDOA,eCPiB,CDOvB,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC,OAAtC;AACA,ACPE,AC2BI,kBD3BE,CADe,AC4BjB,SAAA,CAAA,eAAA,GAAR,YAAA;AFnBE,ACPE,AC2BF,aAAK,CFpBC,KCPG,CAFc,CC6BvB,SFpBA,CAAuB,IAAvB;AACD,ACPG,AC2BF,YAAM,OD3BG,QC2BY,KAAK,MAAL,CAAY,aAAZ,EAArB;AFlBK,ACZkB,AC+BvB,SD/BA,CDYK,EEmBC,OFnBD,CAAA,IEmBa,GFnBb,EEmBkB,CFnBzB,KEmBoB,CAAY,MFnBhC,EEmBoB,EAAlB;AFlBA,ACRA,AC2BA,YAAM,CFnBD,ACRe,GDQpB,CCRoB,KAAA,CAAA,EAAA,CC2BA,ID3BA,CC2BK,ID3BA,EC2BL,CAAY,OD3BhC,CC2BoB,CD3BA,CC2BpB,ID3BoB,GAAA,MAApB,EAAoB,IAApB,EAAmC;ADSnC,ACTK,AC4BL,YAAM,CFnBD,GCTM,IDSX,GAAe,CCTC,GAAA,CDSI,CCTJ,CAAX,CDSU,EEmBY,CFnBD,IEmBM,CFnBD,QAA/B,aEmB2B,EAA3B;AFlBA,ACTE,AC4BF,YFnBI,AEmBE,ID5BA,CDSG,GAAL,ECTQ,CDSG,MAAM,CCTf,KAAmB,AC4BI,IFnB7B,CEmBkC,CFnBD,EEmBJ,CAC3B,ID7B6B,CC6BxB,MAAL,CAAY,CD7BW,CAAgB,IAAvC,EAA6C,KC6B7C,KAA8B,WAA9B,GAA4C,SAA5C,GAAwD,YAD7B,CAA7B;AFlBE,ACTE,AC8BJ,aAAK,IFrBE,GEqBP,CACE,IFtBA,GAAgB,EEqBlB,CD9BmB,CCgCjB,EFvBsB,CCTpB,QDSc,CAAgB,IAAhC,EEqBF,EAGE,cAAc,oBAHhB;AFpBC,ACTE,ACkCH,SF3BA,ICTE,ACoCG,EFzBE,IAAI,ACTF,IAAI,ACkCb,CFzBgB,GAAL,ECTQ,EDSI,MAAM,ACThB,KAAmB,ODSzB,EAAoC,ICTL,SAAN,CAAgB,KAAvC,EAA8C;ADUrD,ACTE,ACkCL,KAfO,YFVC,QAAL,GAAgB,GCTC,GDSK,ECTpB,ODSc,CAAgB,KAAhC;AACD,ACTE,ACmCG,SF5BC,ICTE,EDWF,ICTE,ACmCH,IDnCO,KCmCP,CDnCa,ACmCb,OAAA,CDnCO,ECmCf,GDnCkC,OCoChC,MDpCsC,GCmCxC,EAEE,IDrCgC,CAAgB,KAAvC,CCmCX,CDnCyD,CCsCvD,SAHF,EAGmB;AF5Bf,ACTE,ACuCJ,YAAM,KF9BC,QAAL,EE8BmB,CF9BH,CE8BlB,EDvCmB,GDSK,ECTpB,ODSc,CAAgB,KAAhC;AACD,ACTE,ACwCH;AF9BD,ACTE,ACwCD,KFzCK,OEyCD,gBAAgB,IAApB,EAA0B;AF7Bd,ACVZ,ACwCE,UF9BU,KCVL,UCwCQ,IDxCf,ACwCE,CAAkB,CAAA,GF9BR,GAAd,UAAuC,CE8BZ,KF9B3B,EAAsD,EE8BhC,EAAiB,EF9BvC,EAAmE,EE8B7C,CAAwB,CAAxB,CAAlB;AF7BF,ACVD,ACwCE,KDxDI,ICsDL,MF5BO,AE8BA,CF9BC,OAAO,QAAP,GAAkB,OAAO,QAA1B,IAAsC,CAA7C;AACD,ACTM,ACuCH,KFhCU,MCPP,SAAA,CAAA,ICuCU,IAAb,CAAkB,CAAA,KAAG,GDvClB,GAAP,MCuCqC,IAAf,EDvCtB,CCuC4C,SAAtB,EAAkC,MAAlC,CAAyC,CAAzC,CAAlB;AF5BJ,ACVE,ACuCC,YDvCG,mBAAmB,CAAvB;ADWa,ACVb,ACwCA,UF9Ba,GCVO,IAAA,ICwCP,CDxCO,CAAA,EAAA,ACwCpB,CF9Ba,AE8BK,CAAA,EF9BpB,CCVsB,KAAK,IDWzB,KADF,AE8ByB,CDxCvB,CDYA,CCZoB,KAAA,CDUtB,AE8BoB,EF3BlB,ACboB,ACwCe,MDxCnC,ACwCkB,CF9BpB,AE8B4C,CDxCtB,ACwCF,CF3BH,AE2Bf,GDxCA,EAAmC;ADenC,ACfK,AC0CL,YF3BI,ICfO,QAAK,GAAA,EAAA,CDeM,ACfjB,MDeuB,YAA5B;AACA,ACfE,AC0CF,YF3BI,AE2BE,aAAa,KAAK,CF3BD,CCfD,IDelB,AE2Be,CAAY,CD1CH,EDeI,MCf9B,IC0CiB,EAAnB,OF3BmD,KAAnD,EAA0D;AACxD,ACfD,AC0CD,YAAI,YAAY,MF3BI,GE2BpB,EAA2B,CF3BD,wBAAN,CAA+B,OAA/B,EAAwC,OAAxC,CAAlB;AACD,ACfD,AC0CE,eD1CK,KAAK,KAAL,AC0CQ,CD1CG,GC0ChB,CAAqB,aAAU,ED1CI,KAAK,CC0CxC,SD1CmC,CAAgB,MAA9C,CAAP;ADgBA,ACfD,AC0CE,KDhDI,IC8CL,GFzBM,GE2BC,IAAI,IF3BM,QE2BM,SAAhB,EAA2B,EF3BP,eAAV,CAA0B,CAAC,EAA3B,EAA+B,EAA/B,CAAjB;AACA,ACdK,ACyCH,WDzCG,CDcC,QCdD,CAAA,ICyCU,IAAb,CF3BsB,AE2BD,IDzClB,CDcwB,ECd/B,GDc0B,CAAW,EE2BF,MDzCnC,ECyCI,QF3BmD,QAA7B,CAAxB;AACA,ACdA,ACyCC,SAFM,IDvCa,CDcd,CE2BC,EDzCa,KDcpB,ACdoB,CAAA,EDcH,ACdG,KDcE,ACdF,GDcH,CAAS,CAAT,ACdQ,EDcI,QCd7B,EAAoB,KDcH,ACdG,CDcpB,ECdoB,MAApB,EAAoB,IAApB,EAAmC;ADepC,ACfM,AC0CH,KFvCW,WCHF,QAAK,CC0CD,ED1CC,EAAA,AC0Cd,CD1CG,AC0CkB,aAAU,QAA/B;AFzBW,AChBX,AC0CD,UF1BY,QChBL,OAAN,CDgBW,GAAf,UAAgC,KAAhC,EAA4C;AAC1C,AChBC,AC2CD,YAAM,EF3BA,QAAN,GAAiB,CE2BG,IF3BE,CE2BG,IF3BR,CACf,CE0BkB,CAAY,iBAAZ,EF1BR,AE0BZ,eF1BE,CAA0B,CAA1B,EAA6B,MAAM,MAAnC,KAA8C,MAAM,QAAN,GAAiB,GAA/D,CADe,CAAjB;AAGA,AClBD,AC2CC,KD/CK,gBC+CQ,IAAb,CACE,kBAAM,YAAY,IAAlB,GAAsB,eAAtB,GAA4B,YAAY,KAAxC,GAA6C,eAA7C,GAAmD,YAAY,KAA/D,GAAoE,GADtE;AFxBA,ACjBK,AC6CL,WD7CK,CC6CC,EF5BA,MCjBD,CDiBL,ACjBK,GDiBW,MAAM,AE4BE,GF5BR,EE4Ba,CF5BD,CCjBvB,GAAP,CC6C0B,CF5BU,AE4BE,QF5BpC,ACjBsB,SAAxB,CC6C0B,CD7Ce,CC6CvC;AF3BD,ACjBC,AC8CA,KFnCa,QCXR,IAAI,IAAI,AC8CA,IAAb,CAAkB,ID9ClB,EAAwB,KAAK,CAA7B,EAAgC,GAAhC,AC8CuB,ED9Cc,aC8CrC;AF1FqB,AC6CnB,AC+CF,UF5FqB,OC6Cd,ED7Cc,GAAY,KC6C/B,CAAgB,MAAhB,CD7CmB,AC8CjB,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,KAAK,UAAL,CAAgB,MAA3C,CADF,EAEE,CAFF;AD5CJ,ACgDG,AC4CD,uBAAO,GAAP,CAAW,MAAI,KAAK,WAAT,GAAoB,GAApB,GAAwB,aAAa,IAAb,CAAkB,GAAlB,CAAnC;AF3FqB,ACgDtB,AC4CA,KDnDM,ACcC,KFvDe,eAAA,GAA0B,EAA1B,CAHzB,CAGuD;AACrD,ACiDO,AC4CC,WD5CD,QC4CC,CD5CD,CAAA,OC4CC,CD5CD,AC4CC,GD5CR,KC4CQ,GAAR,ID5CA,QC4CA;AF5FuB,ACiDrB,AC4CA,UF7FqB,ECiDf,CC4CD,GF7FgB,GAAiB,GAAjB,EE6FrB,YD5C8B,KAAK,UAAL,CAAgB,MAA9C;ADhDF,ACiDE,AC4CA,aAAK,MAAL,CAAY,aAAZ;AF5FqB,ACiDrB,AC4CD,KAHO,KF1Fe,GCiDhB,ODjDgB,GAAqB,ACiD1C,EDjDqB,CCiDH,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,KAAD,EAAa;ADhDxD,ACiDI,AC6CJ,mBD7CW,MAAM,OAAb;ADhDmB,ACiDpB,AC6CK,SD/CY,CD/CG,AC+CrB,SC+CM,GF9Fe,GAAuB,EAAvB,CE8Ff,CAAA,sBAAA,GAAR,YAAA;AF7FA,ACiDE,AC6CA,eD7CO,wBAAwB,KAAK,UAAL,CAAgB,MAA/C;ADhDsB,ACiDvB,AC6CC,KDpDK,KD1CiB,EE8FlB,UF9FkB,GAAuB,EAAvB,AE8FH,CFzGvB,CAWqD,UE8F7C,CAA4B,MAA5B,IAAsC,qBAAU,gBAAV,EAA1C,EAAwE;AF1C5E,ACDS,AC4CH,WF3CN,ACDS,KDCT,AE2CY,ID5CH,CAAA,QAAA,CC4CiB,ED5CxB,GC4C6B,SD5C7B,WC4CwB,EAApB;AF1GN,AC+DI,AC4CE,CF3GN,EAAA,SC+DQ,KC4CG,MAAL,CD5Cc,AC4CF,CD5Cd,eC4CE,CACE,KAAK,MAAL,CAAY,aAAZ,MAA+B,YAAY,cAAZ,GAA6B,IAA5D,CADF;AD1CF,AC6CE,QF9GO,ICiEL,IDjEK,CCiEA,EC6CA,QD7CL,CAAgB,EC6ClB,ID7CE,IAA0B,CAA9B,EAAiC;AAC/B,AC6CD,SAND,MAMO,ID7CE,SAAP;AACD,AC6CC,SD/CF,MAEO,IC6CE,IAAP;AD5CA,AC6CD,iBD7CM,IAAI,IAAI,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAtC,EAAyC,KAAK,CAA9C,EAAiD,GAAjD,EAAsD;AACpD,AC6CL,KAXO,eDlCI,QAAQ,KAAK,UAAL,CAAgB,CAAhB,CAAd;AACA,AC8CE,mBAAA,CD9CI,OAAO,CC8CX,CAAA,GD9CgB,OC8ChB,GAAR,ID9CmB,EAAb,MC8CN;AD7CM,AC8CJ,YAAI,KAAK,GD9CD,GC8CJ,CAAY,CD9CH,YC8CT,ED9CI,CAAoB,IC8CQ,CD9C5B,AC8CR,ED9CmC,AC8CI,ID9C/B,CAAJ,EAAsC;AACpC,AC8CJ,mBAAO,KD9CG,OAAO,CC8CjB,CAAqB,KAAK,UD9CC,IC8C3B,CD9CiB,EAAiB,IAAjB,CAAb;AACA,AC8CJ,yBD9CS,EC8CF,GAAP,CAAW,ID9CP,CAAgB,IAAhB,CAAqB,IAArB,IC8CJ;AD7CI,AC8CL,SAHD,MAGO,IAAI,KAAK,MAAL,CAAY,aAAZ,MAA+B,eAAe,gBAAlD,EAAoE;AD7CtE,AC8CH,mBAAO,aAAP,CAAqB,KAAK,cAA1B;AD7CC,AC8CD,2BAAO,GAAP,CACE,8BACE,eAAe,gBADjB,GACiC,qBAFnC;AD7CD,ACkDA;ADjDD,ACkDD,KAZO,UDtCC,SAAP;AACD,ACmDO,KDpED,cCoEC,SAAA,CAAA,oBAAA,GAAR,YAAA;ADjDQ,ACkDN,WDlDM,ICkDC,KDlDD,CAAA,SCkDgB,KDlDhB,GAAR,ICkDS,CACL,KDnDmB,MAAvB,EAAsC,MAAtC,EAAmD,ACmDrC,eAAV,CAA0B,CAA1B,EAA6B,eAAe,YAAf,CAA4B,MAA5B,GAAqC,CAAlE,CADK,CAAP;ADjDA,ACoDD,KAJO,ODhDA,aAAa,aAAM,wBAAN,CAA+B,MAA/B,EAAuC,MAAvC,CAAnB;AACA,AC3EF,eD4EI,OAAO,QAAP,KAAoB,aAAM,SAAN,CAAgB,KAApC,IACA,OAAO,QAAP,KAAoB,aAAM,SAAN,CAAgB,KADpC,IAEA,cAAc,qBAAU,gBAAV,EAFd,IAGA,aAAM,eAAN,IAAyB,qBAAU,gBAAV,EAJ3B;AAMD,AChFuB,KDwEhB,cCxEgB,iBAAA,GAA4B,IAA5B;ADkFhB,ACjFgB,WDiFhB,QCjFgB,CDiFhB,CAAA,cCjFgB,GAA2B,MAA3B,EDiFhB,GAAR,UAAkC,iBAAlC,EAA2D;AACzD,ACjFsB,aDiFjB,IAAI,ECjFa,EDiFT,CAAb,EAAgB,GCjFM,CDiFF,ECjFqB,MAAM,IAAzB,CAJ1B,CAIyD,GDiFrD,EAAuC,GAAvC,EAA4C;AAC1C,AChFoB,iBDgFf,EChFe,QDgFpB,CAAgB,GChFI,CDgFpB,CAAqB,CChF8B,CACrD,EAAE,MAAM,IAAR,EAAc,ED+EZ,cC/E4B,EAA9B,EADqD,EAErD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAFqD,EAGrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAHqD,EAIrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAJqD,EAKrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EALqD,EAMrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EANqD,EAOrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,CAA9B,EAPqD,CAA/B;ADiFrB,ACyCL,WAAA,cAAA;ADxCG,ACxFH,CAAA,EAAA,EDoFU;AAMA,ACwCV,OAAO,IDxCG,ECwCV,GAAgB,IDxCN,CAAA,OCwCM,ODxCN,GAAR,YAAA;AACE,ACwCF,QAAM,ODxCG,KAAK,KCwCS,IAAI,CDxClB,CACL,YCuCmB,EAAvB,ODvCc,eAAV,CAA0B,CAA1B,EAA6B,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAtD,CADK,CAAP;AAGD,ACsCF,CAFD,IDxCU;AAKV,WAAA,MAAA;AArGA,CAAA,EAAA","file":"src.c407fabb.map","sourcesContent":["class Logger {\n  private static readonly safetyOffset: number = 100;\n  public constructor(private autoScroll: boolean) {}\n\n  public log(message: string): void {\n    document.body.appendChild(document.createTextNode(`${message}\\n`));\n\n    if (\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >=\n        document.body.offsetHeight - Logger.safetyOffset\n    ) {\n      // false means to the bottom of the element\n      document.body.scrollIntoView(false);\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","class Generator {\n  public getRandomNumber(min: number, max: number): number {\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    // window.crypto is much slower than a simpler Math.random\n    return Math.floor(Math.random() * (maxFloor - minCeil + 1)) + minCeil;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nenum HumanAgeGroup {\n  Baby = 0,\n  Adult = 1,\n  Elder = 2\n}\n\nexport class Human {\n  public static readonly ageGroups = HumanAgeGroup;\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30; // %\n  // https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people\n  public static readonly maxAge: number = 122;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  public static readonly pubertyAge: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  public static readonly menopauseAge: number = 72;\n  // https://en.wikipedia.org/wiki/Life_expectancy\n  private static readonly baseVitality: number = 33; // %\n\n  public vitality: number = Human.baseVitality;\n  public lifespan: number = 1;\n  public age: number = 0;\n  public ageGroup: HumanAgeGroup = Human.ageGroups.Baby;\n  public isAlive: boolean = true;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    Human.generateVitality(this, parent1, parent2);\n    // lifespan uses vitality, so should be called last\n    Human.generateLifespan(this);\n  }\n\n  public bumpAge(): void {\n    this.age++;\n    this.isAlive = this.age < this.lifespan;\n    if (this.age < Human.pubertyAge) {\n      this.ageGroup = Human.ageGroups.Baby;\n    } else if (this.age >= Human.menopauseAge) {\n      this.ageGroup = Human.ageGroups.Elder;\n    } else {\n      this.ageGroup = Human.ageGroups.Adult;\n    }\n  }\n\n  public static calculateAverageVitality(human1: Human, human2: Human): number {\n    return (human1.vitality + human2.vitality) / 2;\n  }\n\n  // sets non-negative number\n  private static generateVitality(\n    human: Human,\n    parent1?: Human,\n    parent2?: Human\n  ): void {\n    let geneticVitality = Human.baseVitality;\n    if (parent1 instanceof Human && parent2 instanceof Human) {\n      geneticVitality = Human.calculateAverageVitality(parent1, parent2);\n    }\n    const mutation = generator.getRandomNumber(-10, 10);\n    const mutatedVitality = Math.round(geneticVitality + mutation);\n    human.vitality = Math.max(0, mutatedVitality);\n  }\n\n  private static generateLifespan(human: Human): void {\n    human.lifespan = Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * (human.vitality / 100)\n    );\n    // check if not born dead\n    human.isAlive = human.age < human.lifespan;\n  }\n}\n","import { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\ninterface IAgeGroupsCount {\n  baby: number;\n  adult: number;\n  elder: number;\n}\n\nexport class Humans {\n  private population: Human[] = [];\n\n  public constructor(initialPopulation: number) {\n    this.generateInitialPopulation(initialPopulation);\n  }\n\n  public getTotalCount(): number {\n    return this.population.length;\n  }\n\n  public getAgeGroupsCount(): IAgeGroupsCount {\n    const ageGroupsCount = {\n      baby: 0,\n      adult: 0,\n      elder: 0\n    };\n    for (const human of this.population) {\n      if (human.ageGroup === Human.ageGroups.Baby) {\n        ageGroupsCount.baby++;\n      } else if (human.ageGroup === Human.ageGroups.Adult) {\n        ageGroupsCount.adult++;\n      } else if (human.ageGroup === Human.ageGroups.Elder) {\n        ageGroupsCount.elder++;\n      }\n    }\n    return ageGroupsCount;\n  }\n\n  public getAverageVitality(): number {\n    let totalVitalitySum = 0;\n    for (const human of this.population) {\n      totalVitalitySum += human.vitality;\n    }\n    return Math.round(totalVitalitySum / this.population.length);\n  }\n\n  public growByOneYear(): void {\n    for (const human of this.population) {\n      human.bumpAge();\n    }\n  }\n\n  public killRandomHumans(killCount: number): void {\n    for (let i = killCount; i >= 0; i--) {\n      this.population.splice(\n        Math.floor(Math.random() * this.population.length),\n        1\n      );\n    }\n  }\n\n  public buryDead(): number {\n    const populationCountBefore = this.population.length;\n    // keep only alive people in population\n    this.population = this.population.filter((human: Human): boolean => {\n      return human.isAlive;\n    });\n    return populationCountBefore - this.population.length;\n  }\n\n  public makeLove(): number {\n    let bornCount = 0;\n\n    if (this.population.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.population.length - 1; i >= 0; i--) {\n        const human = this.population[i];\n        const mate = this.getRandomHuman();\n        if (this.isLoveFruitful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.population.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private isLoveFruitful(human1: Human, human2: Human): boolean {\n    const loveChance = Human.calculateAverageVitality(human1, human2);\n    return (\n      human1.ageGroup === Human.ageGroups.Adult &&\n      human2.ageGroup === Human.ageGroups.Adult &&\n      loveChance >= generator.getRandomPercent() &&\n      Human.pregnancyChance >= generator.getRandomPercent()\n    );\n  }\n\n  private generateInitialPopulation(initialPopulation: number): void {\n    for (let i = 0; i < initialPopulation; i++) {\n      this.population.push(new Human());\n    }\n  }\n\n  private getRandomHuman(): Human {\n    return this.population[\n      generator.getRandomNumber(0, this.population.length - 1)\n    ];\n  }\n}\n","import { logger } from \"./logger\";\nimport { Humans } from \"./humans\";\nimport { generator } from \"./generator\";\n\ndeclare global {\n  interface String {\n    padEnd(maxLength: number, fillString?: string): string;\n  }\n}\n\ninterface ICatastrophe {\n  type: string;\n  killPercentage: number;\n}\n\nclass HumanExistence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4129;\n  private static readonly targetPopulation: number = 100000;\n  private static readonly yearTime: number = 0.2 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    { type: \"🤢\", killPercentage: 40 },\n    { type: \"☄️\", killPercentage: 35 },\n    { type: \"🌋\", killPercentage: 30 },\n    { type: \"🌊\", killPercentage: 25 },\n    { type: \"❄️\", killPercentage: 20 },\n    { type: \"🏜\", killPercentage: 10 },\n    { type: \"🌪\", killPercentage: 5 }\n  ];\n\n  private humans: Humans;\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.humans = new Humans(HumanExistence.initialPopulation);\n    logger.log(`${this.humans.getTotalCount()} humans appeared.`);\n\n    this.startLife();\n  }\n\n  private startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      HumanExistence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const initialCount = this.humans.getTotalCount();\n    const bornCount = this.humans.makeLove();\n    const buriedCount = this.humans.buryDead();\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.getTotalCount() + buriedCount - bornCount - initialCount\n    );\n    this.logYear(\n      bornCount,\n      appliedCatastrophe,\n      buriedCount + catastropheDeadCount\n    );\n    this.checkGoals();\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    const messageParts = [];\n\n    // births and deaths\n    if (catastrophe === null) {\n      messageParts.push(`⚰️${deadCount}`.padEnd(6));\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`.padEnd(6));\n    }\n\n    messageParts.push(`🤱${bornCount}`.padEnd(6));\n\n    // current population\n    const totalCount = this.humans.getTotalCount();\n    if (deadCount > bornCount) {\n      messageParts.push(`${totalCount}↓`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`${totalCount}↑`);\n    } else {\n      messageParts.push(`${totalCount}–`);\n    }\n\n    const groupsCount = this.humans.getAgeGroupsCount();\n    messageParts.push(\n      `{👶${groupsCount.baby} 👩${groupsCount.adult} 👵${groupsCount.elder}}`\n    );\n\n    const averageVitality = this.humans.getAverageVitality();\n\n    messageParts.push(`💓${averageVitality}`);\n\n    // final message\n    logger.log(`y${this.currentYear} ${messageParts.join(\" \")}`);\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    this.humans.growByOneYear();\n  }\n\n  // kills 20-80% of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (HumanExistence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      this.humans.killRandomHumans(\n        this.humans.getTotalCount() * (catastrophe.killPercentage * 0.01)\n      );\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.getTotalCount() === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.getTotalCount() >= HumanExistence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          HumanExistence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return HumanExistence.catastrophes[\n      generator.getRandomNumber(0, HumanExistence.catastrophes.length - 1)\n    ];\n  }\n}\n\nwindow.onload = (): void => {\n  const humanExistence = new HumanExistence();\n};\n"]}