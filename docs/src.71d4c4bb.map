{"version":3,"sources":["logger.ts","generator.ts","human.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AACE,aAAA,MAAA,CAA2B,UAA3B,EAA8C;ACDhD,ADC6B,ICD7B,SDC6B,GCD7B,ODC6B,GAAA,GCD7B,ODC6B,KCD7B;AAAA,AEAA,AHCoD,aCDpD,SAAA,GAAA,CAcC;AAbQ,ADEA,WAAA,GCFA,MDEA,CAAA,ECFA,CAAA,ADEA,GAAP,UAAW,ECFJ,GAAP,EDEA,EAA0B,MCFH,GAAvB,EAAoC,GAApC,EAA+C;AAC7C,AEDJ,AHGI,YCFM,KDEG,IAAT,CAAc,KCFO,IAAI,EDEzB,CAA0B,QCFL,CAAgB,ADEF,CCFd,CAArB,YDE0B,CAA2B,UAAO,IAAlC,CAA1B;ACDA,ACHJ,AFMI,YACE,GCJK,EDIA,ICJP,CAAc,KDIZ,UCJF,CAA8B,YAA9B;AACA,AEFJ,AHMM,YCJI,eAAe,aAAa,CAAb,KAAmB,aAAa,CAAhC,CAArB;AAEA,ACJJ,AFOM,IEPN,QDIU,ACJV,GFOa,OCHO,GCJpB,CFOM,CCHmB,EDGE,ECHP,CAAU,GAAV,CAAhB,ADG8B,CEPlC,UFOM,IAA2C,SAAS,IAAT,CAAc,YAAd,GAA6B,EAH1E,EAIE;ACHF,ACWF,ACTF,AHEM,IGFN,QFFU,CCWR,KAAA,CAAmB,ECTrB,AHEe,ECJM,EDIf,CEOJ,AFPkB,ECJM,ACWY,KDXjB,CAAW,AEEhC,CDSE,EDXmB,ACWgC,CDXjD,EDIE,CAA6B,KGFnC;AFDI,ACAK,ACqBP,AHjBM,aEJC,ACqBP,EFrBS,CCAF,GAAc,CDAP,ACAP,KDAE,CAAW,ADIJ,CGiBhB,GAAA,KHlBiC,OCHG,WAAW,OAAX,GAAqB,CAArC,CAAX,IAAsD,OAA7D;AACD,ACUC,ACMM,AHZF,KCZC,OCkBD,CCME,MAAA,GAAkB,EAAlB,KDNe,MAAM,SAA3B;ADRK,ACSL,ACMM,AHZF,YEMA,CCME,CFfD,SAAA,ADGM,CCHN,GEeC,CHfyB,EGeA,CDNR,ACMjB,KDNF,IDTC,ACS2B,GDTlC,YAAA,ICSqD,KAAnD,EAA0D;ADR1D,ACSE,ACMI,AHZF,aGYE,EFfC,KAAK,IEeN,AHZM,GGYgB,CAAtB,CDNa,MDTZ,ACSkB,CDTG,CAArB,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","file":"src.71d4c4bb.map","sourcesContent":["class Logger {\n  public constructor(private autoScroll: boolean) {}\n\n  public log(message: string): void {\n    document.body.appendChild(document.createTextNode(`${message}\\n`));\n\n    if (\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >= document.body.offsetHeight - 30\n    ) {\n      document.body.scrollIntoView({\n        behavior: \"instant\",\n        // browser is aligning to the bottom of element\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","class Generator {\n  public getRandomNumber(min: number, max: number): number {\n    const randomBuffer = new Uint32Array(1);\n    window.crypto.getRandomValues(randomBuffer);\n    const randomNumber = randomBuffer[0] / (0xffffffff + 1);\n\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    return Math.floor(randomNumber * (maxFloor - minCeil + 1)) + minCeil;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nexport class Human {\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30; // %\n\n  public vigor: number;\n  public lifespan: number;\n  public age: number = 0;\n\n  private static readonly baseVigor: number = 50; // %\n  // https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people\n  private static readonly maxAge: number = 122;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  private static readonly reproductionAgeMin: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  private static readonly reproductionAgeMax: number = 72;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    let inheritedVigor = Human.baseVigor;\n    if (parent1 instanceof Human && parent2 instanceof Human) {\n      inheritedVigor = Human.calculateAverageVigor(parent1, parent2);\n    }\n\n    this.vigor = this.generateVigor(inheritedVigor);\n    this.lifespan = this.generateLifespan();\n  }\n\n  public bumpAge(): void {\n    this.age++;\n  }\n\n  public isDead(): boolean {\n    return this.age >= this.lifespan;\n  }\n\n  public isBaby(): boolean {\n    return this.age < Human.reproductionAgeMin;\n  }\n\n  public isElder(): boolean {\n    return this.age > Human.reproductionAgeMax;\n  }\n\n  public isFertile(): boolean {\n    return !this.isBaby() && !this.isElder();\n  }\n\n  // returns non-negative number\n  private generateVigor(inheritedVigor: number): number {\n    const geneticVigor = (inheritedVigor + Human.baseVigor) / 2;\n    const mutation = generator.getRandomNumber(-10, 10);\n    const mutatedVigor = Math.round(geneticVigor + mutation);\n    if (mutatedVigor >= 0) {\n      return mutatedVigor;\n    } else {\n      return 0;\n    }\n  }\n\n  private generateLifespan(): number {\n    return Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * (this.vigor / 100)\n    );\n  }\n\n  public static calculateAverageVigor(human1: Human, human2: Human): number {\n    return (human1.vigor + human2.vigor) / 2;\n  }\n}\n","import { logger } from \"./logger\";\nimport { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\ninterface ICatastrophe {\n  type: string;\n  killPercentage: number;\n}\n\nclass HumanExistence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4129;\n  private static readonly targetPopulation: number = 100000;\n  private static readonly yearTime: number = 0.1 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    { type: \"🤢\", killPercentage: 40 },\n    { type: \"☄️\", killPercentage: 35 },\n    { type: \"🌋\", killPercentage: 30 },\n    { type: \"🌊\", killPercentage: 25 },\n    { type: \"❄️\", killPercentage: 20 },\n    { type: \"🏜\", killPercentage: 10 },\n    { type: \"🌪\", killPercentage: 5 }\n  ];\n\n  private humans: Human[] = [];\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.generateInitialPopulation();\n    this.startLife();\n  }\n\n  private generateInitialPopulation(): void {\n    for (let i = 0; i < HumanExistence.initialPopulation; i++) {\n      this.humans.push(new Human());\n    }\n    logger.log(`Unknown force created ${this.humans.length} humans.`);\n  }\n\n  private startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      HumanExistence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const initialCount = this.humans.length;\n    const bornCount = this.makeLove();\n    const buriedCount = this.buryDead();\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.length + buriedCount - bornCount - initialCount\n    );\n\n    this.logYear(\n      bornCount,\n      appliedCatastrophe,\n      buriedCount + catastropheDeadCount\n    );\n    this.checkGoals();\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    const messageParts = [];\n\n    // births and deaths\n    if (catastrophe === null) {\n      messageParts.push(`💀${deadCount}`);\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`);\n    }\n\n    messageParts.push(`🤱${bornCount}`);\n\n    // current population\n    if (deadCount > bornCount) {\n      messageParts.push(`📉${this.humans.length}`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`📈${this.humans.length}`);\n    } else {\n      messageParts.push(`⚖️${this.humans.length}`);\n    }\n\n    const babyCount = this.getBabyCount();\n    const fertileCount = this.getFertileCount();\n    const elderCount = this.getElderCount();\n    messageParts.push(`{👶${babyCount} 👩${fertileCount} 👵${elderCount}}`);\n\n    // final message\n    logger.log(`y${this.currentYear} ${messageParts.join(\" \")}`);\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    for (const human of this.humans) {\n      human.bumpAge();\n    }\n  }\n\n  private makeLove(): number {\n    let bornCount = 0;\n\n    if (this.humans.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.humans.length - 1; i >= 0; i--) {\n        const human = this.humans[i];\n        const mate = this.getRandomHuman();\n        if (this.isLovePossibleAndSuccessful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.humans.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private isLovePossibleAndSuccessful(human1: Human, human2: Human): boolean {\n    const loveChance = Human.calculateAverageVigor(human1, human2);\n    return (\n      human1.isFertile() &&\n      human2.isFertile() &&\n      loveChance >= generator.getRandomPercent() &&\n      Human.pregnancyChance >= generator.getRandomPercent()\n    );\n  }\n\n  private buryDead(): number {\n    let buriedCount = 0;\n    for (let i = this.humans.length - 1; i >= 0; i--) {\n      if (this.humans[i].isDead()) {\n        const deadBody = this.humans.splice(i, 1);\n        buriedCount++;\n      }\n    }\n    return buriedCount;\n  }\n\n  // kills 20-80% of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (HumanExistence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      const killCount = Math.floor(\n        this.humans.length * (catastrophe.killPercentage * 0.01)\n      );\n      // kill random X humans\n      for (let i = killCount; i >= 0; i--) {\n        this.humans.splice(Math.floor(Math.random() * this.humans.length), 1);\n      }\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.length === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.length >= HumanExistence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          HumanExistence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getBabyCount(): number {\n    let babyCount = 0;\n    for (const human of this.humans) {\n      if (human.isBaby()) {\n        babyCount++;\n      }\n    }\n    return babyCount;\n  }\n\n  private getElderCount(): number {\n    let elderCount = 0;\n    for (const human of this.humans) {\n      if (human.isElder()) {\n        elderCount++;\n      }\n    }\n    return elderCount;\n  }\n\n  private getFertileCount(): number {\n    let fertileCount = 0;\n    for (const human of this.humans) {\n      if (human.isFertile()) {\n        fertileCount++;\n      }\n    }\n    return fertileCount;\n  }\n\n  private getRandomHuman(): Human {\n    return this.humans[generator.getRandomNumber(0, this.humans.length - 1)];\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return HumanExistence.catastrophes[\n      generator.getRandomNumber(0, HumanExistence.catastrophes.length - 1)\n    ];\n  }\n}\n\nwindow.onload = (): void => {\n  const humanExistence = new HumanExistence();\n};\n"]}