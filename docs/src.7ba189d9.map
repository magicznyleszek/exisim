{"version":3,"sources":["logger.ts","generator.ts","human.ts","humans.ts","existence.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AAEE,aAAA,MAAA,CAA2B,UAA3B,EAA8C;ACFhD,ADE6B,ICF7B,SDE6B,GCF7B,ODE6B,GAAA,GCF7B,ODE6B,KCF7B;AAAA,ADEoD,aCFpD,SAAA,GAAA,CAWC;AAVQ,ADGA,WAAA,GCHA,MDGA,CAAA,ECHA,CAAA,ADGA,GAAP,UAAW,ECHJ,GAAP,EDGA,EAA0B,MCHH,GAAvB,EAAoC,GAApC,EAA+C;AAC7C,ADGA,YCHM,KDGG,IAAT,CCHgB,ADGF,KCHO,IAAL,CAAU,CDG1B,CAA0B,CCHV,CAAhB,ODGmC,cAAT,CAA2B,UAAO,IAAlC,CAA1B;ACFA,ACHJ,AFOI,YCJM,ADKJ,SAAS,ECLM,EDKf,CAAc,ECLM,KAAL,CAAW,GAAX,CAAjB,EDKE,IACA,KAAK,UADL;ACJF,AIJJ,ALUM;ACLF,ACHJ,ACFA,AHWM,IETD,WDGM,ADME,EETb,GDGgB,KAAL,CAAW,ADMhB,GAAqB,ECNA,KDMO,CCNZ,MAAiB,IDMjC,IACE,GCP0C,MDOjC,CCPsB,GAAqB,ADOpD,CCPc,ADOA,CCPX,IAAuD,OAA9D,ADOI,GAA6B,OAAO,YALxC,EAME;ACPH,ACJH,AGAA,ALYM,CEZN,IDDS,EICF,IHAF,EGAL,GAAgB,QHAhB,EAAkB,EGAF;ADFhB,AHQS,ACLP,ACFF,AEEE,ALYI,QKZE,MJKC,ICLP,GFYa,ECPN,CAAA,CILgB,ALYnB,CAAc,MEZlB,MAAA,EDKO,ADOH,CAA6B,CEZjC,CDKA,ACLA,GFYI,CEZJ,IGAA,EHAA,EDKA;AACE,ACLF,AGAA,ALYG,eCPM,GCLT,CGAe,CJKD,QILd,IHAA,GDKS,CAAqB,CAArB,EAAwB,ACLjC,GDKS,CAAP,ACLF,CAAA,IAAA,OAAA;AEHF,AHSG,ACLD,ACIF,AEJC,ALYE,CKfH,GFOA,CFDS,ADJA,QGKT,KDJE,QCIF,MDJE,MCIF,CDJE,IAAA,CAAA,IAAA,OAAA;ADMF,ACLC,ACMC,AHXwB,CEC1B,EAAK,QDSL,ADV0B,EGWxB,MAAA,CFDF,AECqB,CDVhB,EFDqB,GAAuB,GAAvB,QECR,ACUhB,EDVG,ACUyC,CDV9C;AEAA,AHFA,ACQA,ACEU,AHQV,CClBA,EAAA,CCQA,OFUA,CEVA,CCEU,IHQV,MGRU,EDFV,CCEgC,EAAtB,SDFV;ADKO,ACcL,ACdE,AHbJ,CAAA,EAAA,CCaa,SCcX,ACdO,KDcP,CAAmB,OAAnB,EAAoC,OAApC,CDduB,CCc4B,CCdjD,CAA+B,CFAN,SAAJ,EAAlB,KEAH;ACEJ,AFMS,ACPN,AHMI,IILP,AJKa,SECJ,GENT,KFMS,GAAmB,KEN5B,CFMkC,AFDZ,IAAI,MAAJ,CILtB,AJKiC,CECxB,GFDa,CAAf;AIeL,AFbO,ACNA,WAAA,ECmBP,AFbO,OCNA,CDMA,ACNA,CCmBP,EFb0B,CEa1B,AFbO,SCNA,GAAP,YAAA;ACgBQ,AFTD,ACNL,aCeM,AFTD,ECNE,CDMF,GAAc,CAAd,ACNO,OCeN,GAAyB,ADfxB,CCeD,ADfiB,MAAvB;ACgBM,AFTD,ACNN,KAFM,QCiBC,AFTD,QAAA,GESC,AFTyB,GESH,CAAtB,EFT+B,SAAN,CAAgB,IAA1C;AEYL,AFXK,ACLA,WAAA,ECgBA,AFXA,MEWL,CFXK,ACLA,CAAA,CCgBS,CFXU,IAAnB,WCLA,GCgBoB,ADhB3B,UCgBqC,EDhBrC,eCgBgB,CAAd;AACA,AFTA,ACPA,YAAM,EDOA,SESC,GAAP,CAAc,EDhBS,CDOvB,CAAuB,CESJ,GFTnB,EAA6B,CESf,CAAY,KFT1B,EAAsC,MESxB,CFTd,IESyC,mBAAzC;AACD,AFTC,ACPE,kBAAM,CADe;ACmBlB,AFVL,ACPE,cCiBG,AFVC,KCPG,CAFc,GCmBlB,CAAA,MFVL,CAAuB,EEUlB,EFVL,CEUF,YAAA;AACE,AFVD,ACPG,aCiBG,MDjBI,QCiBT,GAAsB,OAAO,WAAP,CACpB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADoB,EAEpB,UAAU,QAFU,CAAtB;AAID,AFZM,ACZkB,KCmBlB,IDnBL,CDYK,SAAA,CAAA,OAAA,GAAP,YAAA;AEcQ,AFbN,ACRA,aDQK,ACRe,CCqBd,EFbN,CCRoB,KAAA,CCqBd,ADrBc,CCqBd,CDrBc,KAAA,KAAK,ICqBnB,GAAR,GDrBE,EAAoB,KAAA,ECqBtB,CDrBsB,MAApB,EAAoB,IAApB,EAAmC;ACsBnC,AFbA,ACTK,aCsBA,AFbA,GCTM,IDSX,CEaA,EFbe,CCTC,GAAA,CDSI,CCTJ,CAAX,CDSU,GAAW,KAAK,QAA/B;AEcA,AFbA,ACTE,YCsBI,AFbF,ICTE,CDSG,GAAL,ECTQ,CDSG,IEaM,EFbA,CCTf,ECsBoB,GDtBD,GCsBJ,CAAY,AFbjC,EAAiC,OCTF,ICsBV,EAArB,GDtByB,CAAgB,IAAvC,EAA6C;ACuB/C,AFbE,ACTE,YCsBE,KFbC,OEaW,CFbhB,GAAgB,CEaK,EDtBJ,GDSK,CEaN,ADtBd,CCsB0B,OFbZ,CEaA,AFbgB,EEalC,EFbE;AEcF,AFbC,ACTE,SDOH,GEeM,CDxBJ,EDWK,IAAI,ACTF,IAAI,CDSG,EEaI,CFbT,ECTQ,ECsBM,AFbF,MEaH,AFbS,ACThB,CCsBmB,IDtBA,ICsBZ,EAApB,CFbO,EAAoC,ICTL,SAAN,CAAgB,KAAvC,EAA8C;ACuBvD,AFbE,ACTE,YCsBE,KFbC,QAAL,GAAgB,GCTC,ECsBQ,CFbH,ECTpB,ECsB4B,KFbd,CAAgB,KAAhC,WEayB,EAA3B;AACA,AFbC,ACTE,SDOI,GEeD,CDxBG,EDWF,ICTE,IAAI,MAAM,MCsBU,EDtBhB,GCsBqB,EDtBF,CCsBH,CAC3B,KAAK,MAAL,ADvBoC,CCuBxB,QDvBkB,CAAgB,ICuB9C,CDvBO,EAA8C,ECuBvB,WAA9B,GAA4C,SAA5C,GAAwD,YAD7B,CAA7B;AAGA,AFfE,ACTE,aCwBC,IFfE,GEeP,CACE,IFhBA,GAAgB,EEelB,CDxBmB,CC0BjB,EFjBsB,ECTpB,ODSc,CAAgB,KAAhC,CEeF,EAGE,cAAc,oBAHhB;AAKA,AFnBC,ACTE,aC4BE,UAAL;AACD,AFnBA,ACTE,KCaK,AFdD;AE+BC,AFnBM,ACVZ,UDUY,IEmBN,CD7BC,QC6BD,CAAA,KD7BN,EC6BM,GAAR,AFnBc,GAAd,OEoBE,GFpBqC,MEmBvC,AFnBA,EEqBE,AFrBoD,MAAtD,EAAmE,GEmBnE,EAGE,SAHF,EAGmB;AAEjB,AFvBA,ACVD,KAhBM,OCiDC,GFvBC,CAAC,OAAO,IEuBM,EAArB,EFvBQ,GAAkB,OAAO,QAA1B,IAAsC,CAA7C;AEyBA,AFxBD,ACTM,KDOO,MCPP,SAAA,CAAA,kBAAA,GAAP,YAAA;ACkCE,AFvBF,ACVE,YCiCI,ADjCA,gBCiCgB,GDjCG,CCiCvB,ADjCA,ECiC0B;AACxB,AFvBW,ACVb,UDUa,GCVO,IAAA,KAAA,CAAA,ECiCL,ADjCK,CDUP,GEuBX,AFvBJ,CEuBsB,ADjCA,CCiCA,IDjCK,IDWzB,KADF,CCVE,CDYA,CCZoB,CCiCK,IDjCL,CDUtB,EAGE,ACboB,ECiCA,EAAiB,EDjCrC,CDUF,CCVsB,CDaL,CEoBK,CAAwB,CAAxB,ADjCpB,CCiCE,CDjCiC;ACkClC,AFnBD,ACfK,SCgCL,GFjBI,GEmBG,CDlCI,QAAK,GAAA,EAAA,CDeM,ACfjB,MDeuB,YAA5B;AEoBE,AFnBF,ACfE,YDeE,aEmBW,IAAb,CAAkB,CAAA,AFnBG,CCfD,ICkCC,AFnBnB,ECfwB,EDeI,MCf9B,ECkCiC,IAAf,GAAsB,IFnBS,KEmB/B,AFnBpB,EEmBsD,AFnBI,MEmBtC,CAAyC,CAAzC,CAAlB;AACD,AFnBC,ACfD,8BDemB,MAAM,wBAAN,CAA+B,OAA/B,EAAwC,OAAxC,CAAlB;AEqBF,AFpBC,ACfD,eAAO,KAAK,CCmCC,IAAb,ADnCO,CCmCW,ADnCA,CCmCA,iBAAK,CDnCc,KAAK,GCmCxB,EAAiB,KDnCE,CCmCnB,ADnCmC,CCmCX,CAAxB,CAAlB,GDnCO,CAAP;ACqCA,AFrBA,ACfD,KANM,ODqBC,WAAW,qBAAU,eAAV,CAA0B,CAAC,EAA3B,EAA+B,EAA/B,CAAjB;AEsBA,AFrBA,ACdK,WAAA,CCmCC,AFrBA,QCdD,CAAA,ICmCc,KAAK,AFrBA,ICdnB,CDcwB,CEqBV,CAAY,ADnCjC,GDc0B,CAAW,QCdrC,CCmCqB,EAAnB,OFrBqD,QAA7B,CAAxB;AEsBA,AFrBA,ACdA,YCmCI,CDnCgB,CDcd,GCdc,KDcpB,ACdoB,CAAA,CCmCJ,CFrBC,ACdG,KDcE,ACdF,GCmCpB,AFrBiB,CAAS,CEqBC,AFrBV,ACdQ,EDcI,QCd7B,EAAoB,KDcH,ACdG,CDcpB,ECdoB,MAApB,EAAoB,IAApB,EAAmC;ACoCjC,AFrBH,ACfM,KDGQ,WCHF,QAAK,CCoCD,EDpCC,ECoCd,ADpCc,CCoCO,ADpClB,aCoC4B,QAA/B;AACD,AFpBY,AChBX,SCkCF,CFlBa,KEoBN,GDpCC,CCoCG,MDpCT,CDgBW,GAAf,EEoByB,QFpBO,CEoBvB,EAA2B,EFpBpC,EAA4C;AEqBxC,AFpBF,AChBC,cDgBK,QAAN,GEoBe,AFpBE,IEoBf,CAAqB,AFpBD,KAAL,CACf,OEmB+B,QAA/B,MFnBU,eAAV,CAA0B,CAA1B,EAA6B,MAAM,MAAnC,KAA8C,MAAM,QAAN,GAAiB,GAA/D,CADe,CAAjB;AEqBC,AFlBD,AClBD,KAJM,ICsCE,MAEA;AACL,AFlBF,ACjBK,WAAA,GDiBC,MCjBD,CDiBL,ACjBK,GDiBW,CEkBD,IAAb,CAAqB,AFlBD,GAAN,GAAY,CCjBvB,GAAP,EDiBoC,CEkBD,OFlBjC,ACjBsB,CCmCpB,QDnCJ,EAAyC;ACoCtC,AFlBF,ACjBC,KDWa,QCXR,IAAI,IAAI,SAAb,EAAwB,KAAK,CAA7B,EAAgC,GAAhC,EAAqC;ACqCrC,AFjFqB,AC6CnB,UD7CmB,EEiFf,KDpCC,ED7Cc,GAAY,IEiFb,CDpClB,CAAgB,GCoCO,GDpCvB,CD7CmB,AC8CjB,ECmCgB,CAAY,EDnCvB,KAAL,CAAW,KAAK,ICmCA,EAApB,ADnCe,KAAgB,KAAK,UAAL,CAAgB,MAA3C,CADF,EAEE,CAFF;ACqCF,AFjFF,ACgDG,qBCiCY,IAAb,CACE,kBAAM,YAAY,IAAlB,GAAsB,eAAtB,GAA4B,YAAY,KAAxC,GAA6C,eAA7C,GAAmD,YAAY,KAA/D,GAAoE,GADtE;AAIA,AFpFqB,ACgDtB,KAPM,KDzCgB,EEoFf,aFpFe,GAA0B,EEoFvB,AFpFH,CAHzB,CAGuD,GEoFtB,MAAL,CAAY,kBAAZ,EAAxB;AAEA,AFrFF,ACiDO,WAAA,SAAA,CCoCQ,ADpCR,ICoCL,CAAkB,GDpCb,GAAP,WCoCyB,CDpCzB,cCoCE;AAEA,AFtFqB,ACiDrB,UDjDqB,ECiDf,IDjDe,GAAiB,GAAjB,cCiDS,KAAK,UAAL,CAAgB,MAA9C;ACsCA,AFtFF,ACiDE,uBCqCO,GAAP,CAAW,MAAI,KAAK,WAAT,GAAoB,GAApB,GAAwB,aAAa,IAAb,CAAkB,GAAlB,CAAnC;AACD,AFtFsB,ACiDrB,KCAM,KFjDe,GCiDhB,ODjDgB,GAAqB,ACiD1C,EDjDqB,CCiDH,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,KAAD,EAAa;ACuChD,AFvFR,ACiDI,cCsCI,KDtCG,ICsCH,CAAA,CDtCS,OCsCT,ADtCJ,GCsCJ,YAAA;AACE,AFvFqB,ACiDpB,SAFiB,CD/CG,AC+CrB,GCwCK,SFvFgB,EEuFrB,CFvF4C,EAAvB;AEwFrB,AFvFF,ACiDE,aCsCK,EDtCE,ICsCP,CAAY,aAAZ,MDtC+B,KAAK,UAAL,CAAgB,MAA/C;ACuCD,AFvFuB,ACiDvB,KCmCO,AD1CD,KD1CiB,YAAA,GAAuB,EAAvB,CAX1B,CAWqD;AEyFnD,AFrCF,ACDS,WDCT,ACDS,KDCT,ICDS,CAAA,QAAA,GAAP,YAAA;ACuCQ,AFrGV,AC+DI,CD/DJ,EAAA,SC+DQ,ECsCE,SAAA,CAAA,ADtCU,CAAhB,qBCsCM,GAAR,YAAA;AACE,ADrCA,QDjES,ICiEL,IDjEK,CCiEA,UAAL,CAAgB,MAAhB,IAA0B,CAA9B,EAAiC;ACsCjC,ADrCE,YCqCE,ODrCK,GCqCK,MDrCZ,MCqCE,CAAuB,MAAvB,IAAiC,qBAAU,gBAAV,EAArC,EAAmE;AACjE,ADrCD,SAFD,MAEO,CCqCC,cAAc,KAAK,oBAAL,EAApB;AACA,ADrCA,iBCqCK,ADrCA,IAAI,ECqCT,CAAY,CDrCC,KAAK,UCqClB,ADrCa,CCsCX,ADtC2B,KCsCtB,CDtCM,GAAyB,CAAtC,CCsCE,CAAY,ADtC2B,KAAK,CAA9C,EAAiD,GAAjD,ECsCE,ADtCoD,MCsCrB,YAAY,cAAZ,GAA6B,IAA5D,CADF;AAGA,ADvCE,mBCuCK,CDvCC,QAAQ,ECuChB,GDvCqB,UAAL,CAAgB,CAAhB,CAAd;ACwCH,ADvCG,SCiCJ,MAMO,KDvCG,OAAO,KAAK,cAAL,EAAb;ACwCF,ADvCE,mBCuCK,CDvCD,GCuCN,EDvCW,cAAL,CAAoB,KAApB,EAA2B,IAA3B,CAAJ,EAAsC;ACwCzC,ADvCK,wBAAM,OAAO,iBAAU,KAAV,EAAiB,IAAjB,CAAb;ACwCP,ADvCO,KC4BA,oBD5BK,UAAL,CAAgB,IAAhB,CAAqB,IAArB;ACyCA,ADxCA,cCwCA,SAAA,CAAA,UAAA,GAAR,YAAA;AACE,ADxCK,YCwCD,KAAK,MAAL,CAAY,aAAZ,OAAgC,CAApC,EAAuC;AACrC,ADxCC,mBCwCM,aAAP,CAAqB,KAAK,cAA1B;AACA,ADxCD,2BCwCQ,GAAP,CAAW,kBAAX;AACD,ADxCD,SCqCA,MAGO,ADxCA,ICwCI,KAAK,ADxChB,MCwCW,CAAY,aAAZ,MAA+B,UAAU,gBAA7C,EAA+D;AACpE,ADxCH,KAjBM,cCyDI,aAAP,CAAqB,KAAK,cAA1B;AACA,ADvCI,WAAA,SAAA,CAAA,MCuCG,GAAP,CACE,IDxCE,GAAR,UAAuB,MAAvB,EAAsC,KCyC9B,CDzCR,EAAmD,OCyCjC,gBADZ,GAC4B,qBAF9B;AAKD,AD3CD,YAAM,aAAa,aAAM,wBAAN,CAA+B,MAA/B,EAAuC,MAAvC,CAAnB;AC4CD,AD3CC,KC+BM,UD9BJ,OAAO,QAAP,KAAoB,aAAM,SAAN,CAAgB,KAApC,IACA,OAAO,QAAP,KAAoB,aAAM,SAAN,CAAgB,KADpC,IAEA,cAAc,qBAAU,gBAAV,EAFd,IAGA,aAAM,eAAN,IAAyB,qBAAU,gBAAV,EAJ3B;AC6CM,ADvCP,KARO,SC+CA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACE,ADtCM,WAAA,ICsCC,KDtCD,CAAA,ICsCW,YAAV,CACL,QDvCI,GAAR,UCuCc,ADvCoB,eCuC9B,CAA0B,CAA1B,ADvCJ,ECuCiC,ADvC0B,UCuChB,YAAV,CAAuB,MAAvB,GAAgC,CAA7D,CADK,CAAP;AAGD,ADxCC,KCoCM,QDpCD,IAAI,IAAI,CAAb,EAAgB,IAAI,iBAApB,EAAuC,GAAvC,EAA4C;ACpF9C,ADqFI,iBAAK,UAAL,CAAgB,IAAhB,CAAqB,kBAArB;ACpFoB,ADqFrB,cCrFqB,iBAAA,GAA4B,IAA5B;AACA,ADqFvB,KAJO,SCjFgB,gBAAA,GAA2B,MAA3B;AACA,ADsFhB,WAAA,GCtFgB,MDsFhB,CAAA,CCtFgB,GAAmB,MAAM,IAAzB,ADsFhB,CC1FV,CAIyD,CDsFvD,YAAA;ACpFwB,ADqFtB,cCrFsB,CDqFf,KAAK,MCrFU,GAA+B,CACrD,ADoFO,CACL,CCrFA,MAAM,IAAR,EAAc,QDqFF,QCrFkB,EAA9B,EADqD,EAErD,CDoFE,CCpFA,ADoF0B,CAA1B,EAA6B,GCpFvB,EDoF4B,ECpFpC,EAAc,MDoFiB,CAAgB,MAAhB,GCpFD,ADoF0B,CAAtD,CCpFF,ADmFO,CAAP,CCrFqD,EAGrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAHqD,EAIrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAJqD,EAKrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EALqD,EAMrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EANqD,EAOrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,CAA9B,EAPqD,CAA/B;AAwH1B,ADhCG,KAJO,MCoCV,SAAA;AA9HA,AD+FA,CC/FA,EAAA,QD+FA,MAAA;AArGA,CAAA,EAAA,KCMa,YAAA","file":"src.7ba189d9.map","sourcesContent":["class Logger {\n  private static readonly safetyOffset: number = 100;\n  public constructor(private autoScroll: boolean) {}\n\n  public log(message: string): void {\n    document.body.appendChild(document.createTextNode(`${message}\\n`));\n\n    if (\n      document.body.scrollIntoView &&\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >=\n        document.body.offsetHeight - Logger.safetyOffset\n    ) {\n      // false means to the bottom of the element\n      document.body.scrollIntoView(false);\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","class Generator {\n  public getRandomNumber(min: number, max: number): number {\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    // window.crypto is much slower than a simpler Math.random\n    return Math.floor(Math.random() * (maxFloor - minCeil + 1)) + minCeil;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nenum HumanAgeGroup {\n  Baby = 0,\n  Adult = 1,\n  Elder = 2\n}\n\nexport class Human {\n  public static readonly ageGroups = HumanAgeGroup;\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30; // %\n  // https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people\n  public static readonly maxAge: number = 122;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  public static readonly pubertyAge: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  public static readonly menopauseAge: number = 72;\n  // https://en.wikipedia.org/wiki/Life_expectancy\n  private static readonly baseVitality: number = 33; // %\n\n  public vitality: number = Human.baseVitality;\n  public lifespan: number = 1;\n  public age: number = 0;\n  public ageGroup: HumanAgeGroup = Human.ageGroups.Baby;\n  public isAlive: boolean = true;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    Human.generateVitality(this, parent1, parent2);\n    // lifespan uses vitality, so should be called last\n    Human.generateLifespan(this);\n  }\n\n  public bumpAge(): void {\n    this.age++;\n    this.isAlive = this.age < this.lifespan;\n    if (this.age < Human.pubertyAge) {\n      this.ageGroup = Human.ageGroups.Baby;\n    } else if (this.age >= Human.menopauseAge) {\n      this.ageGroup = Human.ageGroups.Elder;\n    } else {\n      this.ageGroup = Human.ageGroups.Adult;\n    }\n  }\n\n  public static calculateAverageVitality(human1: Human, human2: Human): number {\n    return (human1.vitality + human2.vitality) / 2;\n  }\n\n  // sets non-negative number\n  private static generateVitality(\n    human: Human,\n    parent1?: Human,\n    parent2?: Human\n  ): void {\n    let geneticVitality = Human.baseVitality;\n    if (parent1 instanceof Human && parent2 instanceof Human) {\n      geneticVitality = Human.calculateAverageVitality(parent1, parent2);\n    }\n    const mutation = generator.getRandomNumber(-10, 10);\n    const mutatedVitality = Math.round(geneticVitality + mutation);\n    human.vitality = Math.max(0, mutatedVitality);\n  }\n\n  private static generateLifespan(human: Human): void {\n    human.lifespan = Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * (human.vitality / 100)\n    );\n    // check if not born dead\n    human.isAlive = human.age < human.lifespan;\n  }\n}\n","import { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\ninterface IAgeGroupsCount {\n  baby: number;\n  adult: number;\n  elder: number;\n}\n\nexport class Humans {\n  private population: Human[] = [];\n\n  public constructor(initialPopulation: number) {\n    this.generateInitialPopulation(initialPopulation);\n  }\n\n  public getTotalCount(): number {\n    return this.population.length;\n  }\n\n  public getAgeGroupsCount(): IAgeGroupsCount {\n    const ageGroupsCount = {\n      baby: 0,\n      adult: 0,\n      elder: 0\n    };\n    for (const human of this.population) {\n      if (human.ageGroup === Human.ageGroups.Baby) {\n        ageGroupsCount.baby++;\n      } else if (human.ageGroup === Human.ageGroups.Adult) {\n        ageGroupsCount.adult++;\n      } else if (human.ageGroup === Human.ageGroups.Elder) {\n        ageGroupsCount.elder++;\n      }\n    }\n    return ageGroupsCount;\n  }\n\n  public getAverageVitality(): number {\n    let totalVitalitySum = 0;\n    for (const human of this.population) {\n      totalVitalitySum += human.vitality;\n    }\n    return Math.round(totalVitalitySum / this.population.length);\n  }\n\n  public growByOneYear(): void {\n    for (const human of this.population) {\n      human.bumpAge();\n    }\n  }\n\n  public killRandomHumans(killCount: number): void {\n    for (let i = killCount; i >= 0; i--) {\n      this.population.splice(\n        Math.floor(Math.random() * this.population.length),\n        1\n      );\n    }\n  }\n\n  public buryDead(): number {\n    const populationCountBefore = this.population.length;\n    // keep only alive people in population\n    this.population = this.population.filter((human: Human): boolean => {\n      return human.isAlive;\n    });\n    return populationCountBefore - this.population.length;\n  }\n\n  public makeLove(): number {\n    let bornCount = 0;\n\n    if (this.population.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.population.length - 1; i >= 0; i--) {\n        const human = this.population[i];\n        const mate = this.getRandomHuman();\n        if (this.isLoveFruitful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.population.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private isLoveFruitful(human1: Human, human2: Human): boolean {\n    const loveChance = Human.calculateAverageVitality(human1, human2);\n    return (\n      human1.ageGroup === Human.ageGroups.Adult &&\n      human2.ageGroup === Human.ageGroups.Adult &&\n      loveChance >= generator.getRandomPercent() &&\n      Human.pregnancyChance >= generator.getRandomPercent()\n    );\n  }\n\n  private generateInitialPopulation(initialPopulation: number): void {\n    for (let i = 0; i < initialPopulation; i++) {\n      this.population.push(new Human());\n    }\n  }\n\n  private getRandomHuman(): Human {\n    return this.population[\n      generator.getRandomNumber(0, this.population.length - 1)\n    ];\n  }\n}\n","import { logger } from \"./logger\";\nimport { Humans } from \"./humans\";\nimport { generator } from \"./generator\";\n\ndeclare global {\n  interface String {\n    padEnd(maxLength: number, fillString?: string): string;\n  }\n}\n\ninterface ICatastrophe {\n  type: string;\n  killPercentage: number;\n}\n\nexport class Existence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4129;\n  private static readonly targetPopulation: number = 100000;\n  private static readonly yearTime: number = 0.2 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    { type: \"🤢\", killPercentage: 40 },\n    { type: \"☄️\", killPercentage: 35 },\n    { type: \"🌋\", killPercentage: 30 },\n    { type: \"🌊\", killPercentage: 25 },\n    { type: \"❄️\", killPercentage: 20 },\n    { type: \"🏜\", killPercentage: 10 },\n    { type: \"🌪\", killPercentage: 5 }\n  ];\n\n  private humans: Humans;\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.humans = new Humans(Existence.initialPopulation);\n    logger.log(`${this.humans.getTotalCount()} humans appeared.`);\n  }\n\n  public startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      Existence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const initialCount = this.humans.getTotalCount();\n    const bornCount = this.humans.makeLove();\n    const buriedCount = this.humans.buryDead();\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.getTotalCount() + buriedCount - bornCount - initialCount\n    );\n    this.logYear(\n      bornCount,\n      appliedCatastrophe,\n      buriedCount + catastropheDeadCount\n    );\n    this.checkGoals();\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    const messageParts = [];\n\n    // births and deaths\n    if (catastrophe === null) {\n      messageParts.push(`⚰️${deadCount}`.padEnd(6));\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`.padEnd(6));\n    }\n\n    messageParts.push(`🤱${bornCount}`.padEnd(6));\n\n    // current population\n    const totalCount = this.humans.getTotalCount();\n    if (deadCount > bornCount) {\n      messageParts.push(`${totalCount}↓`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`${totalCount}↑`);\n    } else {\n      messageParts.push(`${totalCount}–`);\n    }\n\n    const groupsCount = this.humans.getAgeGroupsCount();\n    messageParts.push(\n      `{👶${groupsCount.baby} 👩${groupsCount.adult} 👵${groupsCount.elder}}`\n    );\n\n    const averageVitality = this.humans.getAverageVitality();\n\n    messageParts.push(`💓${averageVitality}`);\n\n    // final message\n    logger.log(`y${this.currentYear} ${messageParts.join(\" \")}`);\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    this.humans.growByOneYear();\n  }\n\n  // kills 20-80% of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (Existence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      this.humans.killRandomHumans(\n        this.humans.getTotalCount() * (catastrophe.killPercentage * 0.01)\n      );\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.getTotalCount() === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.getTotalCount() >= Existence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          Existence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return Existence.catastrophes[\n      generator.getRandomNumber(0, Existence.catastrophes.length - 1)\n    ];\n  }\n}\n","import { Existence } from \"./existence\";\n\nwindow.onload = (): void => {\n  const humanExistence = new Existence();\n  humanExistence.startLife();\n};\n"]}