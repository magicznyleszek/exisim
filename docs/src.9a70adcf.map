{"version":3,"sources":["logger.ts","generator.ts","human.ts","humans.ts","existence.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AAEE,aAAA,MAAA,CAA2B,UAA3B,EAA8C;ACFhD,ADE6B,ICF7B,SDE6B,GCF7B,ODE6B,GAAA,GCF7B,ODE6B,KCF7B;AAAA,ADEoD,aCFpD,SAAA,GAAA,CAWC;AAVQ,ADGA,WAAA,GCHA,MDGA,CAAA,ECHA,CAAA,ADGA,GAAP,UAAW,ECHJ,GAAP,EDGA,EAA0B,MCHH,GAAvB,EAAoC,GAApC,EAA+C;AAC7C,ADGA,YCHM,KDGG,IAAT,CCHgB,ADGF,KCHO,IAAL,CAAU,CDG1B,CAA0B,CCHV,CAAhB,ODGmC,cAAT,CAA2B,UAAO,IAAlC,CAA1B;ACFA,ACHJ,AFOI,YCJM,ADKJ,SAAS,ECLM,EDKf,CAAc,ECLM,KAAL,CAAW,GAAX,CAAjB,EDKE,IACA,KAAK,UADL;ACJF,AIJJ,ALUM;ACLF,ACHJ,ACFA,AHWM,IETD,WDGM,ADME,EETb,GDGgB,KAAL,CAAW,ADMhB,GAAqB,ECNA,KDMO,CCNZ,MAAiB,IDMjC,IACE,GCP0C,MDOjC,CCPsB,GAAqB,ADOpD,CCPc,ADOA,CCPX,IAAuD,OAA9D,ADOI,GAA6B,OAAO,YALxC,EAME;ACPH,ACJH,AGAA,ALYM,CEZN,IDDS,EICF,IHAF,EGAL,GAAgB,QHAhB,EAAkB,EGAF;ADFhB,AHQS,ACLP,ACFF,AEEE,ALYI,QKZE,MJKC,ICLP,GFYa,ECPN,CAAA,CILgB,ALYnB,CAAc,MEZlB,MAAA,EDKO,ADOH,CAA6B,CEZjC,CDKA,ACLA,GFYI,CEZJ,IGAA,EHAA,EDKA;AACE,ACLF,AGAA,ALYG,eCPM,GCLT,CGAe,CJKD,QILd,IHAA,GDKS,CAAqB,CAArB,EAAwB,ACLjC,GDKS,CAAP,ACLF,CAAA,IAAA,OAAA;AEHF,AHSG,ACLD,ACIF,AEJC,ALYE,CKfH,GFOA,CFDS,ADJA,QGKT,KDJE,QCIF,MDJE,MCIF,CDJE,IAAA,CAAA,IAAA,OAAA;ADMF,ACLC,ACMC,AHXwB,CEC1B,EAAK,QDSL,ADV0B,EGWxB,MAAA,CFDF,AECqB,CDVhB,EFDqB,GAAuB,GAAvB,QECR,ACUhB,EDVG,ACUyC,CDV9C;AEAA,AHFA,ACQA,ACEU,AHQV,CClBA,EAAA,CCQA,OFUA,CEVA,CCEU,IHQV,MGRU,EDFV,CCEgC,EAAtB,SDFV;ADKO,ACeL,ACfE,AHbJ,CAAA,EAAA,CCaa,SCeX,ACfO,KDeP,CAAmB,OAAnB,EAAoC,OAApC,CDfuB,CCe4B,CCfjD,CAA+B,CFAN,SAAJ,EAAlB,KEAH;ACEJ,AFOS,ACRN,AHMI,IILP,AJKa,SEEJ,GEPT,KFOS,GAAmB,KEP5B,CFOkC,AFFZ,IAAI,MAAJ,CILtB,AJKiC,CEExB,GFFa,CAAf;AIeL,AFZO,ACPA,WAAA,ECmBP,AFZO,OCPA,CDOA,ACPA,CCmBP,EFZ0B,CEY1B,AFZO,SCPA,GAAP,YAAA;ACgBQ,AFRD,ACPL,aCeM,AFRD,ECPE,CDOF,GAAc,CAAd,ACPO,OCeN,GAAyB,ADfxB,CCeD,ADfiB,MAAvB;ACgBM,AFRD,ACPN,KAFM,QCiBC,AFRD,QAAA,GEQC,AFRyB,GEQH,CAAtB,EFR+B,SAAN,CAAgB,IAA1C;AEWL,AFVK,ACNA,WAAA,ECgBA,AFVA,MEUL,CFVK,ACNA,CAAA,CCgBS,CFVU,IAAnB,WCNA,GCgBoB,ADhB3B,UCgBqC,EDhBrC,eCgBgB,CAAd;AACA,AFRA,ACRA,YAAM,EDQA,SEQC,GAAP,CAAc,EDhBS,CDQvB,CAAuB,CEQJ,GFRnB,EAA6B,CEQf,CAAY,KFR1B,EAAsC,MEQxB,CFRd,IEQyC,mBAAzC;AACD,AFRC,ACRE,kBAAM,CADe;ACmBlB,AFTL,ACRE,cCiBG,AFTC,KCRG,CAFc,GCmBlB,CAAA,MFTL,CAAuB,EESlB,EFTL,CESF,YAAA;AACE,AFTD,ACRG,aCiBG,MDjBI,QCiBT,GAAsB,OAAO,WAAP,CACpB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADoB,EAEpB,UAAU,QAFU,CAAtB;AAID,AFXM,ACbkB,KCmBlB,IDnBL,CDaK,SAAA,CAAA,OAAA,GAAP,YAAA;AEaQ,AFZN,ACTA,aDSK,ACTe,CCqBd,EFZN,CCToB,KAAA,CCqBd,ADrBc,CCqBd,CDrBc,KAAA,KAAK,ICqBnB,GAAR,GDrBE,EAAoB,KAAA,ECqBtB,CDrBsB,MAApB,EAAoB,IAApB,EAAmC;ACsBnC,AFZA,ACVK,aCsBA,AFZA,GCVM,IDUX,CEYA,EFZe,CCVC,GAAA,CDUI,CCVJ,CAAX,CDUU,GAAW,KAAK,QAA/B;AEaA,AFZA,ACVE,YCsBI,AFZF,ICVE,CDUG,GAAL,ECVQ,CDUG,IEYM,EFZA,CCVf,ECsBoB,GDtBD,GCsBJ,CAAY,AFZjC,EAAiC,OCVF,ICsBV,EAArB,GDtByB,CAAgB,IAAvC,EAA6C;ACuB/C,AFZE,ACVE,YCsBE,KFZC,OEYW,CFZhB,GAAgB,CEYK,EDtBJ,GDUK,CEYN,ADtBd,CCsB0B,OFZZ,CEYA,AFZgB,EEYlC,EFZE;AEaF,AFZC,ACVE,SDQH,GEcM,CDxBJ,EDYK,IAAI,ACVF,IAAI,CDUG,EEYI,CFZT,ECVQ,ECsBM,AFZF,MEYH,AFZS,ACVhB,CCsBmB,IDtBA,ICsBZ,EAApB,CFZO,EAAoC,ICVL,SAAN,CAAgB,KAAvC,EAA8C;ACuBvD,AFZE,ACVE,YCsBE,KFZC,QAAL,GAAgB,GCVC,ECsBQ,CFZH,ECVpB,ECsB4B,KFZd,CAAgB,KAAhC,WEYyB,EAA3B;AACA,AFZC,ACVE,SDQI,GEcD,CDxBG,EDYF,ICVE,IAAI,MAAM,MCsBU,EDtBhB,GCsBqB,EDtBF,CCsBH,CAC3B,KAAK,MAAL,ADvBoC,CCuBxB,QDvBkB,CAAgB,ICuB9C,CDvBO,EAA8C,ECuBvB,WAA9B,GAA4C,SAA5C,GAAwD,YAD7B,CAA7B;AAGA,AFdE,ACVE,aCwBC,IFdE,GEcP,CACE,IFfA,GAAgB,EEclB,CDxBmB,CC0BjB,EFhBsB,ECVpB,ODUc,CAAgB,KAAhC,CEcF,EAGE,cAAc,oBAHhB;AAKA,AFlBC,ACVE,aC4BE,UAAL;AACD,AFlBA,ACVE,KCaK,AFbD;AE8BC,AFlBM,ACXZ,UDWY,IEkBN,CD7BC,QC6BD,CAAA,KFlBM,ACXZ,EC6BM,CFlBR,EEkBA,QFlBkC,EEmBhC,IFnBF,EAAiD,GEkBjD,EAEE,CFpBF,EAA8D,QEkB9D,EAGE,SAHF,EAGmB;AAEjB,AFtBA,ACXD,KAhBM,OCiDC,AFtBA,eEsBe,EAArB,CFtBwB,MAAM,wBAAN,CAA+B,MAA/B,EAAuC,MAAvC,CAAxB;AEwBA,AFvBA,ACVK,WAAA,CDWH,KAAK,GAAL,ACXG,CDWM,ACXN,ODWa,QAAP,GAAkB,KCXxB,EDW+B,CCXtC,ODWI,KAA+C,ACXnD,MDWyD,oBADvD,EAEE;AEsBF,AFrBE,ACZF,YCiCI,ADjCA,KAAK,EDYA,QCZL,CCiCgB,ADjCA,ICiCpB,EAA0B,ADjCtB,GDYuB,ECZI,CAA/B,EAAkC,CDYD,oBAA/B;AEsBA,AFrBD,ACZC,SDQF,MAIO,ICZE,CAAP,KCiCa,IAAb,CAAkB,CAAA,iBAAK,SAAL,EAAiB,MAAjB,CAAwB,CAAxB,CAAlB;AACD,AFrBC,ACZD,SC+BD,ADjCA,MCmCO,ADjCA,IDYE,kBAAkB,MAAM,oBAA/B;AEsBA,AFrBD,ACZC,gBAAI,SCiCS,IAAb,CAAkB,CAAA,IDjCK,CCiCF,ADjCrB,YCiCiC,IAAf,GAAsB,SAAtB,EAAkC,MAAlC,CAAyC,CAAzC,CAAlB;AACD,AFrBF,ACZG,KDGU,YCHU,IAAA,KAAA,CAAA,EAAA,KAAA,KAAK,UAAzB,EAAoB,KAAA,GAAA,MAApB,EAAoB,IAApB,EAAmC;ACmCrC,AFrBa,ACdN,UDcM,UCdA,CCmCA,IAAb,CAAkB,CAAA,CDnCA,GAAA,EAAA,CDcL,ACdN,GDcT,OEqByB,GFpBvB,MEoBkB,AFrBpB,EEqBqC,AFnBnC,MEmBkB,AFrBpB,CEqB4C,CAAxB,AFnBL,CEmBb;AAEA,AFnBA,ACjBI,eDiBG,CAAC,OAAO,QAAP,GAAkB,ECjBF,KDiBS,CCjBH,ODiBvB,CCjBH,GDiByC,CAA7C;AEoBA,AFnBD,ACjBI,KDYU,OEwBP,aAAa,KAAK,MAAL,CAAY,aAAZ,EAAnB;AACA,AFlBF,AClBI,YCoCE,ODpCK,KCoCO,ADpCF,KAAL,CAAW,GCoCpB,EAA2B,cDpCY,KAAK,UAAL,CAAgB,MAA9C,CAAP;ACqCA,AFlBW,AClBZ,UDkBY,eEkBE,CFlBF,GEkBX,AFlBJ,CEkByB,SFjBvB,IEiBiC,CFlBnC,EAEE,KEgBE,EFlBJ,EAGE,OAHF,EAGiB;AEgBd,AFdD,ACtBD,KAVM,IC4CL,GFZI,GEcG,IAAI,WFdW,CEcC,KFdK,IEcrB,EAA2B,MFdlC;AEeE,AFdF,ACrBK,WAAA,CDqBD,QCrBC,CAAA,ICmCU,IAAb,CAAqB,CFdA,GCrBlB,EDqBD,CCrBN,GDqBkC,GEcC,MDnCnC,ECmCI,QFdiD,KAAnD,EAA0D;AEezD,AFdC,ACrBF,SCiCO,IDjCa,ECmCb,CFdC,CCrBY,KAAA,CAAA,EAAA,KAAA,IDqBM,CCrBD,KDqBO,KCrBhC,EAAoB,KAAA,GAAA,MAApB,EAAoB,CDqBM,CAA+B,ECrBzD,EAAmC,GDqBT,EAAwC,OAAxC,CAAxB;AEeA,AFdA,ACtBG,gBAAM,QAAK,CCoCD,EDpCC,ECoCd,ADpCc,CCoCO,AFdH,ACtBf,CDsBgB,MAAM,MEcM,MFdZ,EEcnB,CFdwC,eAAtB,IAAyC,CAA3D;AEeD,AFdA,ACtBC,kBAAM,OAAN;ACsCF,AFfA,ACtBC,YCqCK,AFfA,WAAW,GEeG,KAAK,MAAL,CAAY,MFfL,WEeP,EAApB,EFfiB,CAA0B,CAAC,EAA3B,EAA+B,EAA/B,CAAjB;AEgBA,AFfA,ACtBD,KAJM,SD0BC,OEeO,CFfb,GEeA,AFfiB,CEgBf,IFhBoB,GAAL,CAAS,CAAT,EAAY,KAAK,EEgB1B,GFhBqB,CAAW,QEgBpB,IAAlB,GAAsB,GFhBkC,QAA7B,CAAZ,CAAjB,EEgBE,GAA4B,YAAY,KAAxC,GAA6C,eAA7C,GAAmD,YAAY,KAA/D,GAAoE,GADtE;AAIA,AFlBD,ACrBM,KDSQ,MCTR,CCuCC,QDvCD,CAAA,SCuCmB,KAAK,EDvCxB,GAAP,CCuC0B,CAAY,QDvCd,SAAxB,EAAyC,ICuCf,EAAxB;AAEA,AFlBa,ACtBb,UDsBa,GCtBR,IAAI,ICwCI,ADxCA,ICwCb,CAAkB,AFlBL,GAAf,CCtBE,EAAwB,KAAK,CAA7B,CDsB8B,CCtBE,GCwCT,ADxCvB,CDsBF,CCtBuC,CDsBK,YEkB1C;AAEA,AFnBA,ACtBE,cDsBI,GCtBC,KDsBP,GAAiB,ECtBf,CAAgB,EDsBI,ICtBpB,CDsBe,ACrBb,CDsBF,ICtBO,KAAL,CAAW,KAAK,MDsBR,ACtBG,KAAgB,KAAK,KDsBlC,CAA0B,CAA1B,EAA6B,CCtBA,CAAgB,IDsBV,ECtBjC,CADF,EAEE,CDqBF,ACvBA,KDuB8C,MAAM,QAAN,GAAiB,GAA/D,CADe,CAAjB;AEoBA,AFjBA,ACrBC,uBCsCM,GAAP,CAAW,MAAI,KAAK,WAAT,GAAoB,GAApB,GAAwB,aAAa,IAAb,CAAkB,GAAlB,CAAnC;AACD,AFjBC,ACrBD,KCCO,ADRD,SD4BC,OAAN,GAAgB,MAAM,GAAN,GAAY,MAAM,QAAlC;AEmBM,AFlBP,ACpBM,KDcQ,MCdR,GCsCC,MDtCD,CAAA,ECsCC,CAAA,KDtCD,GCsCC,ADtCR,GCsCA,SDtCA,GCsCA;AACE,AF/FqB,ACyDrB,UDzDqB,ECyDf,CCsCD,MF/FgB,GAAY,EE+FjC,WF/FqB,CCyDS,KAAK,UAAL,CAAgB,MAA9C;ACuCA,AF/FF,ACyDE,aCsCK,MAAL,CAAY,aAAZ;AACD,AF/FsB,ACyDrB,KCmCM,KF5Fe,GCyDhB,UAAL,EDzDqB,CCyDH,EDzD6B,EAA1B,CAHzB,AC4D2B,CDzD4B,SCyDjC,CAAgB,MAAhB,CAAuB,UAAC,KAAD,EAAa;ACwCxD,AFhGA,ACyDI,mBAAO,MAAM,OAAb;ACwCI,AFhGe,ACyDpB,SAFiB,CDvDG,ACuDrB,ICyCM,EFhGe,GAAiB,GAAjB,CEgGf,CAAA,sBAAA,GAAR,YAAA;AACE,AFhGF,ACyDE,eAAO,wBAAwB,KAAK,UAAL,CAAgB,MAA/C;ACwCA,AFhGqB,ACyDtB,KAPM,KDlDgB,EEgGjB,QFhGiB,EEgGP,CFhG4B,EAArB,SEgGjB,CAAuB,MAAvB,IAAiC,qBAAU,gBAAV,EAArC,EAAmE;AACjE,AFhGJ,AC0DO,WAAA,KCsCG,IDtCH,CAAA,QAAA,CCsCiB,EDtCxB,GCsC6B,SDtC7B,WCsCwB,EAApB;AACA,AFhGmB,AC0DrB,UD1DqB,EC0DjB,KCsCG,KFhGc,CEgGnB,CAAY,ADtCE,CD1D4B,AC0D5C,ED1DqB,aEgGnB,CACE,KAAK,MAAL,CAAY,aAAZ,MAA+B,YAAY,cAAZ,GAA6B,IAA5D,CADF;AAGA,AFlGJ,AC2DE,YAAI,KAAK,ECuCA,QDvCL,CAAgB,ECuClB,IDvCE,IAA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","file":"src.9a70adcf.map","sourcesContent":["class Logger {\n  private static readonly safetyOffset: number = 100;\n  public constructor(private autoScroll: boolean) {}\n\n  public log(message: string): void {\n    document.body.appendChild(document.createTextNode(`${message}\\n`));\n\n    if (\n      document.body.scrollIntoView &&\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >=\n        document.body.offsetHeight - Logger.safetyOffset\n    ) {\n      // false means to the bottom of the element\n      document.body.scrollIntoView(false);\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","class Generator {\n  public getRandomNumber(min: number, max: number): number {\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    // window.crypto is much slower than a simpler Math.random\n    return Math.floor(Math.random() * (maxFloor - minCeil + 1)) + minCeil;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nenum HumanAgeGroup {\n  Baby = 0,\n  Adult = 1,\n  Elder = 2\n}\n\nexport class Human {\n  public static readonly ageGroups = HumanAgeGroup;\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30; // %\n  // https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people\n  public static readonly maxAge: number = 122;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  public static readonly pubertyAge: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  public static readonly menopauseAge: number = 72;\n  // we base on Classical Rome period: https://en.wikipedia.org/wiki/Life_expectancy\n  private static readonly baseVitality: number = 47; // %\n  private static readonly similarityLoveFactor: number = 10; // %\n\n  public vitality: number = Human.baseVitality;\n  public lifespan: number = 1;\n  public age: number = 0;\n  public ageGroup: HumanAgeGroup = Human.ageGroups.Baby;\n  public isAlive: boolean = true;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    Human.generateVitality(this, parent1, parent2);\n    // lifespan uses vitality, so should be called last\n    Human.generateLifespan(this);\n  }\n\n  public bumpAge(): void {\n    this.age++;\n    this.isAlive = this.age < this.lifespan;\n    if (this.age < Human.pubertyAge) {\n      this.ageGroup = Human.ageGroups.Baby;\n    } else if (this.age >= Human.menopauseAge) {\n      this.ageGroup = Human.ageGroups.Elder;\n    } else {\n      this.ageGroup = Human.ageGroups.Adult;\n    }\n  }\n\n  public static calculateLoveChance(human1: Human, human2: Human): number {\n    const averageVitality = Human.calculateAverageVitality(human1, human2);\n    if (\n      Math.abs(human1.vitality - human2.vitality) >= Human.similarityLoveFactor\n    ) {\n      return averageVitality - Human.similarityLoveFactor;\n    } else {\n      return averageVitality + Human.similarityLoveFactor;\n    }\n  }\n\n  private static calculateAverageVitality(\n    human1: Human,\n    human2: Human\n  ): number {\n    return (human1.vitality + human2.vitality) / 2;\n  }\n\n  // sets non-negative number\n  private static generateVitality(\n    human: Human,\n    parent1?: Human,\n    parent2?: Human\n  ): void {\n    let geneticVitality = Human.baseVitality;\n    if (parent1 instanceof Human && parent2 instanceof Human) {\n      const parentsVitality = Human.calculateAverageVitality(parent1, parent2);\n      geneticVitality = (Human.baseVitality + parentsVitality) / 2;\n    }\n    const mutation = generator.getRandomNumber(-20, 20);\n    human.vitality = Math.max(0, Math.round(geneticVitality + mutation));\n  }\n\n  private static generateLifespan(human: Human): void {\n    human.lifespan = Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * (human.vitality / 100)\n    );\n    // check if not born dead\n    human.isAlive = human.age < human.lifespan;\n  }\n}\n","import { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\ninterface IAgeGroupsCount {\n  baby: number;\n  adult: number;\n  elder: number;\n}\n\nexport class Humans {\n  private population: Human[] = [];\n\n  public constructor(initialPopulation: number) {\n    this.generateInitialPopulation(initialPopulation);\n  }\n\n  public getTotalCount(): number {\n    return this.population.length;\n  }\n\n  public getAgeGroupsCount(): IAgeGroupsCount {\n    const ageGroupsCount = {\n      baby: 0,\n      adult: 0,\n      elder: 0\n    };\n    for (const human of this.population) {\n      if (human.ageGroup === Human.ageGroups.Baby) {\n        ageGroupsCount.baby++;\n      } else if (human.ageGroup === Human.ageGroups.Adult) {\n        ageGroupsCount.adult++;\n      } else if (human.ageGroup === Human.ageGroups.Elder) {\n        ageGroupsCount.elder++;\n      }\n    }\n    return ageGroupsCount;\n  }\n\n  public getTotalAverageVitality(): number {\n    if (this.population.length === 0) {\n      return 0;\n    } else {\n      let totalVitalitySum = 0;\n      for (const human of this.population) {\n        totalVitalitySum += human.vitality;\n      }\n      return Math.round(totalVitalitySum / this.population.length);\n    }\n  }\n\n  public growByOneYear(): void {\n    for (const human of this.population) {\n      human.bumpAge();\n    }\n  }\n\n  public killRandomHumans(killCount: number): void {\n    for (let i = killCount; i >= 0; i--) {\n      this.population.splice(\n        Math.floor(Math.random() * this.population.length),\n        1\n      );\n    }\n  }\n\n  public buryDead(): number {\n    const populationCountBefore = this.population.length;\n    // keep only alive people in population\n    this.population = this.population.filter((human: Human): boolean => {\n      return human.isAlive;\n    });\n    return populationCountBefore - this.population.length;\n  }\n\n  public makeLove(): number {\n    let bornCount = 0;\n\n    if (this.population.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.population.length - 1; i >= 0; i--) {\n        const human = this.population[i];\n        const mate = this.getRandomHuman();\n        if (this.isLoveFruitful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.population.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private isLoveFruitful(human1: Human, human2: Human): boolean {\n    if (\n      human1.ageGroup === Human.ageGroups.Adult &&\n      human2.ageGroup === Human.ageGroups.Adult\n    ) {\n      const loveChance = Human.calculateLoveChance(human1, human2);\n      return (\n        loveChance >= generator.getRandomPercent() &&\n        Human.pregnancyChance >= generator.getRandomPercent()\n      );\n    } else {\n      return false;\n    }\n  }\n\n  private generateInitialPopulation(initialPopulation: number): void {\n    for (let i = 0; i < initialPopulation; i++) {\n      this.population.push(new Human());\n    }\n  }\n\n  private getRandomHuman(): Human {\n    return this.population[\n      generator.getRandomNumber(0, this.population.length - 1)\n    ];\n  }\n}\n","import { logger } from \"./logger\";\nimport { Humans } from \"./humans\";\nimport { generator } from \"./generator\";\n\ndeclare global {\n  interface String {\n    padEnd(maxLength: number, fillString?: string): string;\n  }\n}\n\ninterface ICatastrophe {\n  type: string;\n  killPercentage: number;\n}\n\nexport class Existence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4129;\n  private static readonly targetPopulation: number = 1000000;\n  private static readonly yearTime: number = 0.2 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    { type: \"🤢\", killPercentage: 40 },\n    { type: \"☄️\", killPercentage: 35 },\n    { type: \"🌋\", killPercentage: 30 },\n    { type: \"🌊\", killPercentage: 25 },\n    { type: \"❄️\", killPercentage: 20 },\n    { type: \"🏜\", killPercentage: 10 },\n    { type: \"🌪\", killPercentage: 5 }\n  ];\n\n  private humans: Humans;\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.humans = new Humans(Existence.initialPopulation);\n    logger.log(`${this.humans.getTotalCount()} humans appeared.`);\n  }\n\n  public startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      Existence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const initialCount = this.humans.getTotalCount();\n    const bornCount = this.humans.makeLove();\n    const buriedCount = this.humans.buryDead();\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.getTotalCount() + buriedCount - bornCount - initialCount\n    );\n    this.logYear(\n      bornCount,\n      appliedCatastrophe,\n      buriedCount + catastropheDeadCount\n    );\n    this.checkGoals();\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    const messageParts = [];\n\n    // births and deaths\n    if (catastrophe === null) {\n      messageParts.push(`⚰️${deadCount}`.padEnd(6));\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`.padEnd(6));\n    }\n\n    messageParts.push(`🤱${bornCount}`.padEnd(6));\n\n    // current population\n    const totalCount = this.humans.getTotalCount();\n    if (deadCount > bornCount) {\n      messageParts.push(`${totalCount}↓`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`${totalCount}↑`);\n    } else {\n      messageParts.push(`${totalCount}–`);\n    }\n\n    const groupsCount = this.humans.getAgeGroupsCount();\n    messageParts.push(\n      `{👶${groupsCount.baby} 👩${groupsCount.adult} 👵${groupsCount.elder}}`\n    );\n\n    const averageVitality = this.humans.getTotalAverageVitality();\n\n    messageParts.push(`💓${averageVitality}`);\n\n    // final message\n    logger.log(`y${this.currentYear} ${messageParts.join(\" \")}`);\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    this.humans.growByOneYear();\n  }\n\n  // kills 20-80% of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (Existence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      this.humans.killRandomHumans(\n        this.humans.getTotalCount() * (catastrophe.killPercentage * 0.01)\n      );\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.getTotalCount() === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.getTotalCount() >= Existence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          Existence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return Existence.catastrophes[\n      generator.getRandomNumber(0, Existence.catastrophes.length - 1)\n    ];\n  }\n}\n","import { Existence } from \"./existence\";\n\nwindow.onload = (): void => {\n  const humanExistence = new Existence();\n  humanExistence.startLife();\n};\n"]}