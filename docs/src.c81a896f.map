{"version":3,"sources":["logger.ts","generator.ts","human.ts","humans.ts","index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,aAAA,YAAA;AAEE,aAAA,MAAA,CAA2B,UAA3B,EAA8C;ACFhD,ADE6B,aAAA,UAAA,GAAA,UAAA;ACD7B,ADCoD,ICDpD,YAAA,aAAA,YAAA;AAAA,ADGS,WAAA,ECHT,ODGS,CAAA,CCHT,EDGS,CCHT,CAUC,CDPC,UAAW,OAAX,EAA0B;ACFnB,AGFT,AJKI,cCHK,GDGI,IAAT,CAAc,CCHT,CAAA,SDGL,CAA0B,KCHrB,GAAP,CDGqC,SCHd,GAAvB,EAAoC,ADGR,CAA2B,ECHvD,EAA+C,MDGe,IAAlC,CAA1B;ACFA,ACHJ,AFOI,YCJM,ADKJ,KAAK,KCLS,KAAK,ADKnB,ICLc,CAAU,GAAV,CAAhB;AACA,AGHJ,AJQM,YCLI,WAAW,KAAK,KAAL,CAAW,GAAX,CAAjB;AACA,ACHJ,ACFA,AHUM,IERN,QAAA,GDGW,ADKE,KCLG,KAAL,ACHX,CDGsB,ADKhB,GAAqB,ECLA,KDKO,CCLZ,ACHtB,MDGuC,IDKjC,IACE,GCN0C,MDMjC,CCNsB,GAAqB,ADMpD,CCNc,ADMA,CCNX,IAAuD,OAA9D,ADMI,GAA6B,OAAO,YAJxC,EAKE;ACNH,ACYD,AEhBF,AJWM,KCXG,QCgBP,KAAA,CAAmB,OAAnB,EAAoC,OAApC,EAAmD;ADV5C,ACQA,ACfT,AHaM,aEEG,CDRA,ECQA,GAAc,CAAd,CFFM,ECNN,CAAA,CDMH,CAAc,cCNX,ADMH,CAA6B,ECNjC,GDMI,SCNJ;AACE,ACUA,AEJJ,AJAK,IIAL,QFIQ,GDVG,KAAK,CGMhB,QFIyB,KEJzB,CHNW,ACUoB,CDVC,CAArB,EAAwB,GAAxB,CAAP,CCUA,EEJJ;AHLG,ACUC,ACjBJ,ACgCE,AJnBC,IGbH,CFKS,ADJA,OEgBD,CCjBR,ACgCE,aDhCF,CCgCE,GAAA,CFfyB,KAAnB,ECjBR,EDiBoC,mBAAmB,KAAnD,EAA0D;ADT9D,ACUM,ACfJ,AC0BQ,AJ/BgB,WCU1B,ADV0B,EGKxB,AC0BQ,MD1BR,CFKF,AELqB,GHLK,GAAuB,CI+BvC,EFXa,AFpBG,CI+BS,CAAzB,IFXmB,ECf3B,EAA4C,iBDevB,CAA4B,OAA5B,EAAqC,OAArC,CAAjB;ADpBN,ACqBK,AClBK,AC6BA,AJhBV,CChBA,EAAA,QDgBA,EGbU,AC6BA,IJhBV,MGbU,CC6BA,ED7BsB,CC6BA,CD7BtB,AC6BA;AHpBH,ACWH,ACjBA,AC6BA,AJpCJ,CAAA,EAAA,CCaa,SCWJ,ACjBA,AC6BA,KFZL,CEYA,EFZa,CEYC,IFZI,UDXG,EENrB,CDiBa,ACjBkB,CFMN,ACWO,CEYP,QHvBJ,EAAlB,GCWU,CAAb,CCjBA,AC6BwC,iBAA1B,CAAd;AFXA,ACjBD,AC6BC,AJlBG,IAAM,SEMJ,QAAL,EEYO,CFZS,EEYhB,CAAc,EFZO,CFNH,EIkBC,EJlBG,IIkBR,CAAY,CJlBR,CAAW,IEMb,AFNE,CAAf,CEMH,KEYc,KAA2B,mBAAzC;AFXD,AChBM,AC6BL,WD7BK,EC6BA,OD7BA,CAAA,CC6BL,YD7BK,GAAP,YAAA;ADkBO,ACjBL,AC6BD,UFZM,KCjBE,IDiBF,CAAA,ACjBO,ODiBP,GAAP,ACjBS,CAAgB,MAAvB,KDiBF;AACE,ACjBD,AC8BO,KDhCD,QDmBA,GAAL,GEaM,SAAA,CAAA,SAAA,GAAR,YAAA;AFZC,AChBM,AC6BL,KFfK,MCdA,EC6BA,OD7BA,CAAA,MC6BL,GAAsB,GD7BjB,GAAP,CC6B+B,WD7B/B,AC6BwB,CACpB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADoB,EAEpB,eAAe,QAFK,CAAtB;AFXK,ACjBL,ACgCD,KALO,KFVD,ECjBD,ODiBC,CAAA,ICjBW,CAAhB,CDiBK,GAAP,YAAA;AACE,ACjBA,ACiCM,aDjCc,EDiBb,ECjBa,ECiCd,CFhBM,ECjBQ,CDiBb,ACjBa,EAAA,EDiBD,CEgBb,CAAA,CDjCc,EDiBI,GCjBC,KDiBzB,IEgBM,CDjCN,EAAoB,ACiCtB,KDjCsB,GAAA,ICiCtB,EDjCE,EAAoB,IAApB,EAAmC;ADkBpC,AClBM,ACkCL,KFlBK,QEkBA,GDlCM,KCkCX,GDlCgB,GAAA,EAAA,CAAX;ADoBA,ACnBH,ACkCF,UFfK,EEeC,IDlCA,GDmBD,CAAA,ECnBO,IDmBP,CEegB,CDlCf,CDmBR,CCnBI,EAAoB,ACkCI,MAAL,CAAY,EFfnC,WEeuB,EAArB;AFdA,ACnBI,ACkCJ,YAAM,GFfC,KAAK,GAAL,CEeW,EFfA,GEeK,GFfC,GEeN,CAAY,QAAZ,EAAlB,IFfA;AACD,ACnBI,ACkCH,KFjBK,OEiBC,cAAc,KAAK,MAAL,CAAY,QAAZ,EAApB;AFbK,ACpBJ,ACkCD,UFdK,EEcC,OFdD,CAAA,OAAA,GAAP,GEc6B,KAAK,IFdlC,kBEc6B,EAA3B;AFbA,ACpBA,ACkCA,YAAM,GFdC,ACpBA,KDoBK,GAAL,CCpBP,EDoBkB,MAAM,GEcK,KAAK,GAAL,CAC3B,KAAK,CFfP,KEeE,CAAY,aAAZ,KAA8B,WAA9B,GAA4C,SAA5C,GAAwD,YAD7B,CAA7B;AFbD,ACpBA,ACoCC,KFlBK,AC1BA,QC4CA,OAAL,CACE,SADF,EAEE,kBAFF,EAGE,cAAc,oBAHhB;AFdK,ACpBA,ACuCL,UFnBK,CCpBA,ECuCA,MFnBA,CAAA,ACpBA,CAAA,ECuCL,MFnBK,GAAP,ECpBO,GAAP,ODoBA,KCpBA;ADqBE,ACpBA,ACuCD,KAfO,ODxBF,GDoBG,CAAC,KAAK,ICpBI,CAAjB,CDoBQ,EAAD,IAAkB,CAAC,KAAK,OAAL,EAA1B;AACD,ACpBC,ACwCM,KFtBD,QClBe,IAAA,ECwCd,GDxCc,CAAA,EAAA,GCwCd,CAAA,CDxCc,KAAK,CCwCnB,GAAR,MDxCE,EAAoB,ECyCpB,GDzCoB,GAAA,GCwCtB,EAEE,CD1CA,EAAoB,IAApB,EAAmC,ECwCrC,EAGE,SAHF,EAGmB;AFrBnB,ACtBO,AC6CL,YAAM,ID7CK,QAAK,GAAA,AC6CK,ED7CL,AC6ChB,CD7CK;ADuBC,ACtBJ,AC8CF,UFxBM,MCtBA,GDsBA,CAAA,ECtBM,OAAN,EAAJ,EDsBI,ACtBiB,GDsBzB,UAAsB,cAAtB,EAA4C;AAC1C,ACtBI,AC8CJ,YFxBM,AEwBF,eFxBiB,CAAC,AEwBF,IAApB,EAA0B,WFxBa,MAAM,SAAxB,IAAqC,CAA1D;AACA,ACtBG,AC8CD,YFxBI,WAAW,EEwBF,IAAb,CAAkB,CAAA,aFxBO,IEwBF,SAAL,EFxBH,AEwBoB,CFxBM,CAAC,EAA3B,EAA+B,AEwB5B,CAAwB,CFxB3B,AEwBG,CFxBpB,AEwBE;AFvBF,ACtBC,AC8CA,SAFD,GFtBM,GEwBC,YFxBc,KAAK,KAAL,CAAW,eAAe,QAA1B,CAArB;AACA,ACtBA,AC8CE,YFxBE,GCtBG,UAAP,AC8Ce,GFxBK,CAApB,AEwBE,CAAkB,CFxBG,AEwBH,KAAG,YAAY,IAAf,GAAsB,SAAtB,EAAkC,MAAlC,CAAyC,CAAzC,CAAlB;AFvBA,ACtBH,AC8CE,KDtDI,cD8BI,YAAP;AACD,ACrBI,AC8CL,SF3BA,ECnBK,IDqBE,KCrBF,CAAA,AC8CQ,IAAb,CAAkB,CAAA,SD9Cb,GAAP,KC8CyB,OD9CzB,EC8CoB,EAAiB,MAAjB,CAAwB,CAAxB,CAAlB;AFxBE,ACrBF,AC+CA,YD/CI,ODqBK,CAAP,OCrBiB,CAAnB;ADsBC,ACrBD,AC+CA,YAAM,CD/Cc,IAAA,KAAA,CAAA,EAAA,AC+CD,KD/CC,AC+CI,KD/CC,CC+CN,CAAY,QD/C/B,EAAoB,GC+CD,ED/CC,AC+CpB,GD/CoB,MAApB,EAAoB,IAApB,EAAmC;ADsBpC,ACtBM,ACgDL,KFnCM,OEmCF,IDhDO,QAAK,ACgDA,GDhDA,EAAA,CAAX,GCgDL,EAA2B;AFxBrB,ACvBJ,ACgDA,UFzBI,MCvBA,GDuBA,CAAA,ECvBM,GCgDG,IAAb,CAAqB,CDhDjB,EAAJ,EAAuB,CDuBnB,GAAR,IEyBmC,QFzBnC,AEyBI;AFxBF,ACvBI,ACgDH,SAFD,MFvBO,AEyBA,IAAI,CFzBC,KAAL,CACL,KEwBqB,SAAhB,EAA2B,KFxBtB,eAAV,CAA0B,CAA1B,EAA6B,MAAM,MAAnC,KAA8C,KAAK,KAAL,GAAa,GAA3D,CADK,CAAP;AAGD,ACzBI,ACgDD,KF3BI,oBE2BS,IAAb,CAAqB,aAAU,QAA/B;AFrBU,AC1BX,ACgDA,SAFM,CFpBK,KEsBL,gBFtBK,GAAd,UAAoC,MAApC,EAAmD,MAAnD,EAAgE;AAC9D,AC1BA,ACgDE,eFtBK,AC1BA,CD0BC,OAAO,EEsBA,EDhDf,CD0BQ,CEsBN,CAAqB,CFtBA,OAAO,KAAvB,AEsB0B,IFtBM,CAAvC,GEsBE;AFrBH,AC1BA,ACgDE,KFxBW,AChCP;AD/BP,ACyCO,ACgDL,WDhDK,CCgDC,QDhDD,CAAA,GCgDa,KAAK,KDhDlB,CCgDa,CAAY,CDhDhC,WCgDoB,CDhDpB,CCgDE;AFxFqB,ACyCrB,ACgDA,UFzFqB,EEyFf,CDhDc,IAAA,KAAA,CAAA,EDzCC,ACyCD,ECgDC,CFzF0B,EAA1B,ACyCD,CD3CxB,CAEuD,AEyFzB,GDhDD,GCgDJ,CAAY,MDhDjC,EAAoB,KAAA,ECgDC,CDhDD,CCgDpB,KDhDA,EAAoB,IAApB,EAAmC;ADvCb,ACuCjB,ACiDL,UFxFsB,EEwFhB,IDjDK,GDvCW,GAAoB,EAApB,ACuCN,CD3CpB,AE4FuB,CFxF2B,CCuC9B,EAAA,CAAX,ACiDmB,MAAL,CAAY,aAAZ,EAAnB;AFvFF,ACuCI,ACiDF,kBDjDQ,GCiDK,IDjDX,ACiDF,CAAkB,kBAAM,SAAN,GAAe,eAAf,GAAqB,YAArB,GAAiC,eAAjC,GAAuC,UAAvC,GAAiD,GAAnE;AFvFsB,ACuCrB,ACkDD,UFzFsB,MAAA,GAAiB,GAAjB;AACxB,ACuCC,ACkDC,KDtDK,kBCsDE,GAAP,CAAW,MAAI,KAAK,WAAT,GAAoB,GAApB,GAAwB,aAAa,IAAb,CAAkB,GAAlB,CAAnC;AFxFsB,ACwCjB,ACiDN,KAjCO,KFxDgB,CCwCjB,SAAA,CAAA,ODxCiB,GAA6B,EAA7B,ICwCjB,GAAP,UAAwB,SAAxB,EAAyC;ADvCzC,ACwCE,ACkDM,aDlDD,IAAI,ECkDH,EDlDO,OCkDP,CAAA,CDlDN,EAAwB,KAAK,ACkDvB,CDlDN,EAAgC,ACkDlC,GDlDE,EAAqC,OCkDvC;AFzFwB,ACwCpB,ACkDF,UF1FsB,GE0FjB,IDlDE,OCkDP,IF1FsB,GAA6B,EAA7B,ACwCpB,CAAsB,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,KAAK,UAAL,CAAgB,MAA3C,CAAtB;ADiBN,AChBK,ACkDD,WFlCJ,EEkCS,GFlCT,GEkCI,CAAY,aAAZ;AFrGJ,ACoDG,ACkDA,CFtGH,EAAA,ECgDS,ACmDC;AD7CD,ACkDP,QFxGW,GCsDJ,KDtDI,ICsDJ,CAAA,QAAA,GAAP,YAAA;AACE,ACkDM,YDlDF,OCkDE,ODlDY,CAAlB,CCkDM,CAAA,sBAAA,GAAR,YAAA;ADjDE,ACkDA,aDlDK,IAAI,IAAI,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAtC,EAAyC,KAAK,CAA9C,EAAiD,GAAjD,EAAsD;AACpD,ACkDF,YAAI,IDlDE,KAAK,MCkDQ,IDlDb,CAAgB,CAAhB,EAAmB,ICkDrB,CAA4B,CDlD1B,EAAJ,EAAiC,CCkD/B,IAAsC,qBAAU,gBAAV,EAA1C,EAAwE;ADjDpE,ACkDF,gBAAM,KDlDC,SCkDa,KAAK,EDlDvB,CAAsB,CAAtB,gBCkDkB,EAApB;ADjDE,ACkDF,iBAAK,MAAL,CAAY,gBAAZ,CACE,KAAK,MAAL,CAAY,aAAZ,MAA+B,YAAY,cAAZ,GAA6B,IAA5D,CADF;ADjDC,ACoDD,mBAAO,WAAP;ADnDD,ACoDA,SAND,MAMO;ADnDP,ACoDE,eDpDK,ICoDE,IAAP,GDpDF;AACD,ACoDE,KD7DI;AAWA,ACmDN,KAXO,MDxCD,SAAA,CAAA,QAAA,GAAP,YAAA;AACE,ACoDM,YDpDF,OCoDE,KDpDU,CAAhB,GCoDM,CAAA,UAAA,GAAR,YAAA;ADlDE,ACmDA,YDnDI,ACmDA,KDnDK,ACmDA,MAAL,CAAY,GDnDZ,CAAgB,MAAhB,GCmDA,CDnD0B,CAA9B,EAAiC,GCmDG,CAApC,EAAuC;ADlDrC,ACmDA,mBDnDO,ACmDA,SDnDP,ICmDA,CAAqB,KAAK,cAA1B;ADlDD,ACmDC,SDrDF,MAEO,YCmDE,GAAP,CAAW,kBAAX;ADlDA,ACmDD,SAHD,MAGO,EDnDA,ECmDI,EDnDA,GCmDK,CDnDD,KAAK,ACmDT,CAAY,SDnDR,CAAgB,GCmDpB,GDnDI,GAAyB,ACmDE,CDnDxC,EAAyC,KAAK,CAA9C,EAAiD,GAAjD,CCmDuD,CDnDD,eCmDjD,EAAoE;ADlDvE,ACmDF,mBAAO,CDnDC,QAAQ,ICmDhB,CDnDqB,ACmDA,KAAK,KDnDV,CAAgB,CAAhB,CAAd,MCmDF;ADlDE,ACmDF,oBDnDQ,OAAO,ACmDR,GAAP,CACE,CDpDkB,cAAL,EAAb,aCqDE,eAAe,gBADjB,GACiC,qBAFnC;ADlDE,ACuDH,oBDvDO,KAAK,2BAAL,CAAiC,KAAjC,EAAwC,IAAxC,CAAJ,EAAmD;AACjD,ACuDP,KAZO,mBD3CM,OAAO,iBAAU,KAAV,EAAiB,IAAjB,CAAb;AACA,ACwDA,mBAAA,MDxDK,GCwDL,CAAA,MDxDA,CAAgB,IAAhB,CAAqB,IAArB,ICwDA,GAAR,YAAA;ADvDQ,ACwDN,eAAO,eAAe,YAAf,CACL,qBAAU,eAAV,CAA0B,CAA1B,EAA6B,eAAe,YAAf,CAA4B,MAA5B,GAAqC,CAAlE,CADK,CAAP;ADvDK,AC0DN,KAJO;ADrDH,ACjEL;ADkEG,ACjEqB,mBAAA,iBAAA,GAA4B,IAA5B;ADkEtB,ACjEsB,eDiEf,ICjEe,KDiEtB,WCjEsB,GAA2B,MAA3B;ADkEvB,ACjEuB,KDgDjB,cChDiB,QAAA,GAAmB,MAAM,IAAzB,CAJ1B,CAIyD;ADmE/C,ACjEgB,WDiEhB,QCjEgB,CDiEhB,CAAA,UCjEgB,GAA+B,CACrD,EDgEM,AChEJ,GDgEJ,GChEU,IAAR,EAAc,CDgES,KAAzB,EAAsC,QChEN,EAA9B,EADqD,EAErD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAFqD,EAGrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAHqD,EAIrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EAJqD,EAKrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EALqD,EAMrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,EAA9B,EANqD,EAOrD,EAAE,MAAM,IAAR,EAAc,gBAAgB,CAA9B,EAPqD,CAA/B;ADkEtB,ACoDJ,WAAA,EDpDS,UAAL,CAAgB,CCoDpB,KDpDI,CAAuB,KAAvB,EAA8B,CAA9B;AACD,ACzEH,CAAA,EAAA,EDuEU;AAIA,ACmDV,OAAO,IDnDG,ECmDV,GAAgB,IDnDN,CAAA,OCmDM,oBDnDN,GAAR,UAAoC,MAApC,EAAmD,MAAnD,EAAgE;AAC9D,ACmDF,QAAM,IDnDE,aAAa,ACmDE,IAAI,SDnDA,KCmDJ,EAAvB,cDnDqB,CAA4B,MAA5B,EAAoC,MAApC,CAAnB;AACA,ACmDH,CAFD,cDhDM,OAAO,SAAP,MACA,OAAO,SAAP,EADA,IAEA,cAAc,qBAAU,gBAAV,EAFd,IAGA,aAAM,eAAN,IAAyB,qBAAU,gBAAV,EAJ3B;AAMD,KARO;AAUA,WAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,iBAAlC,EAA2D;AACzD,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,iBAApB,EAAuC,GAAvC,EAA4C;AAC1C,iBAAK,UAAL,CAAgB,IAAhB,CAAqB,kBAArB;AACD;AACF,KAJO;AAMA,WAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AACE,eAAO,KAAK,UAAL,CACL,qBAAU,eAAV,CAA0B,CAA1B,EAA6B,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAtD,CADK,CAAP;AAGD,KAJO;AAKV,WAAA,MAAA;AA5GA,CAAA,EAAA","file":"src.c81a896f.map","sourcesContent":["class Logger {\n  private static readonly safetyOffset: number = 100;\n  public constructor(private autoScroll: boolean) {}\n\n  public log(message: string): void {\n    document.body.appendChild(document.createTextNode(`${message}\\n`));\n\n    if (\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >=\n        document.body.offsetHeight - Logger.safetyOffset\n    ) {\n      // false means to the bottom of the element\n      document.body.scrollIntoView(false);\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","// I tried using window.crypto, but it was much slower than a simpler Math.random\nclass Generator {\n  public getRandomNumber(min: number, max: number): number {\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    return Math.floor(Math.random() * (maxFloor - minCeil + 1)) + minCeil;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nexport class Human {\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30; // %\n\n  private static readonly baseVigor: number = 50; // %\n  // https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people\n  private static readonly maxAge: number = 122;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  private static readonly reproductionAgeMin: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  private static readonly reproductionAgeMax: number = 72;\n\n  public vigor: number;\n  public lifespan: number;\n  public age: number = 0;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    let inheritedVigor = Human.baseVigor;\n    if (parent1 instanceof Human && parent2 instanceof Human) {\n      inheritedVigor = Human.calculateAverageVigor(parent1, parent2);\n    }\n\n    this.vigor = this.generateVigor(inheritedVigor);\n    this.lifespan = this.generateLifespan();\n  }\n\n  public bumpAge(): void {\n    this.age++;\n  }\n\n  public isDead(): boolean {\n    return this.age >= this.lifespan;\n  }\n\n  public isBaby(): boolean {\n    return this.age < Human.reproductionAgeMin;\n  }\n\n  public isElder(): boolean {\n    return this.age > Human.reproductionAgeMax;\n  }\n\n  public isFertile(): boolean {\n    return !this.isBaby() && !this.isElder();\n  }\n\n  // returns non-negative number\n  private generateVigor(inheritedVigor: number): number {\n    const geneticVigor = (inheritedVigor + Human.baseVigor) / 2;\n    const mutation = generator.getRandomNumber(-10, 10);\n    const mutatedVigor = Math.round(geneticVigor + mutation);\n    if (mutatedVigor >= 0) {\n      return mutatedVigor;\n    } else {\n      return 0;\n    }\n  }\n\n  private generateLifespan(): number {\n    return Math.floor(\n      generator.getRandomNumber(0, Human.maxAge) * (this.vigor / 100)\n    );\n  }\n\n  public static calculateAverageVigor(human1: Human, human2: Human): number {\n    return (human1.vigor + human2.vigor) / 2;\n  }\n}\n","import { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\nexport class Humans {\n  private population: Human[] = [];\n\n  public constructor(initialPopulation: number) {\n    this.generateInitialPopulation(initialPopulation);\n  }\n\n  public getTotalCount(): number {\n    return this.population.length;\n  }\n\n  public getBabyCount(): number {\n    let babyCount = 0;\n    for (const human of this.population) {\n      if (human.isBaby()) {\n        babyCount++;\n      }\n    }\n    return babyCount;\n  }\n\n  public getElderCount(): number {\n    let elderCount = 0;\n    for (const human of this.population) {\n      if (human.isElder()) {\n        elderCount++;\n      }\n    }\n    return elderCount;\n  }\n\n  public getFertileCount(): number {\n    let fertileCount = 0;\n    for (const human of this.population) {\n      if (human.isFertile()) {\n        fertileCount++;\n      }\n    }\n    return fertileCount;\n  }\n\n  public growByOneYear(): void {\n    for (const human of this.population) {\n      human.bumpAge();\n    }\n  }\n\n  public killRandomHumans(killCount: number): void {\n    for (let i = killCount; i >= 0; i--) {\n      this.killHumanByIndex(Math.floor(Math.random() * this.population.length));\n    }\n  }\n\n  public buryDead(): number {\n    let buriedCount = 0;\n    for (let i = this.population.length - 1; i >= 0; i--) {\n      if (this.population[i].isDead()) {\n        this.killHumanByIndex(i);\n        buriedCount++;\n      }\n    }\n    return buriedCount;\n  }\n\n  public makeLove(): number {\n    let bornCount = 0;\n\n    if (this.population.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.population.length - 1; i >= 0; i--) {\n        const human = this.population[i];\n        const mate = this.getRandomHuman();\n        if (this.isLovePossibleAndSuccessful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.population.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  private killHumanByIndex(index: number): void {\n    this.population.splice(index, 1);\n  }\n\n  private isLovePossibleAndSuccessful(human1: Human, human2: Human): boolean {\n    const loveChance = Human.calculateAverageVigor(human1, human2);\n    return (\n      human1.isFertile() &&\n      human2.isFertile() &&\n      loveChance >= generator.getRandomPercent() &&\n      Human.pregnancyChance >= generator.getRandomPercent()\n    );\n  }\n\n  private generateInitialPopulation(initialPopulation: number): void {\n    for (let i = 0; i < initialPopulation; i++) {\n      this.population.push(new Human());\n    }\n  }\n\n  private getRandomHuman(): Human {\n    return this.population[\n      generator.getRandomNumber(0, this.population.length - 1)\n    ];\n  }\n}\n","import { logger } from \"./logger\";\nimport { Humans } from \"./humans\";\nimport { generator } from \"./generator\";\n\ndeclare global {\n  interface String {\n    padEnd(maxLength: number, fillString?: string): string;\n  }\n}\n\ninterface ICatastrophe {\n  type: string;\n  killPercentage: number;\n}\n\nclass HumanExistence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4129;\n  private static readonly targetPopulation: number = 100000;\n  private static readonly yearTime: number = 0.2 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    { type: \"🤢\", killPercentage: 40 },\n    { type: \"☄️\", killPercentage: 35 },\n    { type: \"🌋\", killPercentage: 30 },\n    { type: \"🌊\", killPercentage: 25 },\n    { type: \"❄️\", killPercentage: 20 },\n    { type: \"🏜\", killPercentage: 10 },\n    { type: \"🌪\", killPercentage: 5 }\n  ];\n\n  private humans: Humans;\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n\n  public constructor() {\n    this.humans = new Humans(HumanExistence.initialPopulation);\n    logger.log(`${this.humans.getTotalCount()} humans appeared.`);\n\n    this.startLife();\n  }\n\n  private startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      HumanExistence.yearTime\n    );\n  }\n\n  private simulateOneYear(): void {\n    this.bumpYear();\n    const initialCount = this.humans.getTotalCount();\n    const bornCount = this.humans.makeLove();\n    const buriedCount = this.humans.buryDead();\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.getTotalCount() + buriedCount - bornCount - initialCount\n    );\n    this.logYear(\n      bornCount,\n      appliedCatastrophe,\n      buriedCount + catastropheDeadCount\n    );\n    this.checkGoals();\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    const messageParts = [];\n\n    // births and deaths\n    if (catastrophe === null) {\n      messageParts.push(`⚰️${deadCount}`.padEnd(6));\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`.padEnd(6));\n    }\n\n    messageParts.push(`🤱${bornCount}`.padEnd(6));\n\n    // current population\n    const totalCount = this.humans.getTotalCount();\n    if (deadCount > bornCount) {\n      messageParts.push(`${totalCount}↓`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`${totalCount}↑`);\n    } else {\n      messageParts.push(`${totalCount}–`);\n    }\n\n    const babyCount = this.humans.getBabyCount();\n    const fertileCount = this.humans.getFertileCount();\n    const elderCount = this.humans.getElderCount();\n    messageParts.push(`{👶${babyCount} 👩${fertileCount} 👵${elderCount}}`);\n\n    // final message\n    logger.log(`y${this.currentYear} ${messageParts.join(\" \")}`);\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    this.humans.growByOneYear();\n  }\n\n  // kills 20-80% of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (HumanExistence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      this.humans.killRandomHumans(\n        this.humans.getTotalCount() * (catastrophe.killPercentage * 0.01)\n      );\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    if (this.humans.getTotalCount() === 0) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\"All humans died.\");\n    } else if (this.humans.getTotalCount() >= HumanExistence.targetPopulation) {\n      window.clearInterval(this.lifeIntervalId);\n      logger.log(\n        `Human population reached ${\n          HumanExistence.targetPopulation\n        }. They're safe now.`\n      );\n    }\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return HumanExistence.catastrophes[\n      generator.getRandomNumber(0, HumanExistence.catastrophes.length - 1)\n    ];\n  }\n}\n\nwindow.onload = (): void => {\n  const humanExistence = new HumanExistence();\n};\n"]}