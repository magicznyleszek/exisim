{"version":3,"sources":["logger.ts","generator.ts","human.ts","humans.ts","existence.ts","index.ts"],"names":[],"mappings":"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","file":"src.17af2572.js","sourceRoot":"../src","sourcesContent":["class Logger {\n  private static readonly safetyOffset: number = 100;\n  public constructor(private autoScroll: boolean) {}\n\n  // adds given message to the body, ending with newline\n  public log(message: string): void {\n    // insertAdjacentHTML seems to be a bit faster than appendChild\n    document.body.insertAdjacentHTML(\"beforeend\", `${message}\\n`);\n\n    if (\n      document.body.scrollIntoView &&\n      this.autoScroll &&\n      // enable autoscroll only if scrolled to almost end of page\n      window.innerHeight + window.pageYOffset >=\n        document.body.offsetHeight - Logger.safetyOffset\n    ) {\n      // false means to the bottom of the element\n      document.body.scrollIntoView(false);\n    }\n  }\n}\n\nexport const logger = new Logger(true);\n","class Generator {\n  private lookup: number[] = [];\n  private lookupIndex: number = 0;\n\n  public constructor() {\n    for (let i = 1e6; i >= 0; i--) {\n      this.lookup.push(Math.round(Math.random() * 100));\n    }\n  }\n\n  public getRandomNumber(min: number, max: number): number {\n    this.lookupIndex++;\n    if (this.lookupIndex >= this.lookup.length) {\n      this.lookupIndex = 0;\n    }\n    const randomNumber = this.lookup[this.lookupIndex];\n    return Math.floor(randomNumber / 100 * (max - min)) + min;\n  }\n\n  public getRandomPercent(): number {\n    return this.getRandomNumber(0, 100);\n  }\n\n  // returns capitalized two part name, e.g. \"N03murxt48 Ka9dpari\"\n  public getUniqueName(): string {\n    const firstName = Math.random().toString(36).substring(2);\n    const lastName = Date.now().toString(36);\n    return (`${firstName} ${lastName}`).replace(/\\b\\w/g, (c: string) => c.toUpperCase());\n  }\n}\n\nexport const generator = new Generator();\n","import { generator } from \"./generator\";\n\nexport class Human {\n  // https://menstrual-cycle-calculator.com/chance-pregnant-unprotected-sex/\n  public static readonly pregnancyChance: number = 30 / 100;\n  // based on Paleolithic https://en.wikipedia.org/wiki/Life_expectancy\n  public static readonly maxAge: number = 54;\n  // https://en.wikipedia.org/wiki/Age_and_female_fertility\n  public static readonly pubertyAge: number = 12;\n  // https://en.wikipedia.org/wiki/Pregnancy_over_age_50\n  public static readonly menopauseAge: number = 72;\n  // The Framingham Heart Study https://www.sharecare.com/health/longevity/how-parents-lifespan-affect-lifespan\n  private static readonly lifespanInheritance: number = 6 / 100;\n  // https://revisesociology.com/2017/11/07/how-many-people-single/\n  private static readonly inRelationshipChance: number = 61 / 100;\n\n  public age: number = 0;\n  public isAdult: boolean = false;\n  public isAlive: boolean = true;\n  public name: string;\n  public lifespan: number;\n\n  public constructor(parent1?: Human, parent2?: Human) {\n    this.name = generator.getUniqueName();\n    this.lifespan = this.generateLifespan(parent1, parent2);\n    // check if not born dead\n    this.checkIfAlive();\n  }\n\n  // increments the age by 1, checks if didn't die of old age and assigns to proper age group\n  public bumpAge(): void {\n    this.age++;\n    this.isAdult = this.age >= Human.pubertyAge;\n    this.checkIfAlive();\n  }\n\n  // generates lifespan based on random things and parents\n  private generateLifespan(parent1?: Human, parent2?: Human): number {\n    const randomLifespan = generator.getRandomNumber(0, Human.maxAge);\n    if (randomLifespan === 0) {\n      return 0;\n    } else if (parent1 instanceof Human && parent2 instanceof Human) {\n      return Math.floor(\n        Human.lifespanInheritance * ((parent1.lifespan + parent2.lifespan) / 2) +\n        (1 - Human.lifespanInheritance) * randomLifespan\n      );\n    } else {\n      return randomLifespan;\n    }\n  }\n\n  private checkIfAlive(): void {\n    this.isAlive = this.age < this.lifespan;\n  }\n\n  // returns a % chance two given humans will fall in love and make a baby\n  public static getBabyChance(human1: Human, human2: Human): number {\n    if (human1.isAdult && human2.isAdult) {\n      return 100 * (Human.pregnancyChance * Human.inRelationshipChance);\n    } else {\n      return 0;\n    }\n  }\n}\n","import { Human } from \"./human\";\nimport { generator } from \"./generator\";\n\ninterface IAgeGroupsCount {\n  baby: number;\n  adult: number;\n}\n\nexport class Humans {\n  private population: Human[] = [];\n\n  public constructor(initialPopulation: number) {\n    this.generateInitialPopulation(initialPopulation);\n  }\n\n  public getTotalCount(): number {\n    return this.population.length;\n  }\n\n  public getAgeGroupsCount(): IAgeGroupsCount {\n    const ageGroupsCount = {\n      baby: 0,\n      adult: 0\n    };\n    for (const human of this.population) {\n      if (human.isAdult) {\n        ageGroupsCount.adult++;\n      } else {\n        ageGroupsCount.baby++;\n      }\n    }\n    return ageGroupsCount;\n  }\n\n  public growByOneYear(): void {\n    for (const human of this.population) {\n      human.bumpAge();\n    }\n  }\n\n  // immediately removes X random humans from the population\n  public killRandomHumans(killCount: number): void {\n    for (let i = killCount; i >= 0; i--) {\n      const populationLength = this.population.length;\n      const randomIndex = Math.floor(Math.random() * populationLength);\n      this.population[randomIndex] = this.population[populationLength - 1];\n      this.population.pop();\n    }\n  }\n\n  // removes humans that died from old age from the population\n  // returns the number of removed humans\n  public buryDead(): number {\n    const populationCountBefore = this.population.length;\n    // keep only alive people in population\n    this.population = this.population.filter((human: Human): boolean => {\n      return human.isAlive;\n    });\n    return populationCountBefore - this.population.length;\n  }\n\n  // finds a random mate for each human and if matched will create a new baby human\n  // returns the number of born humans\n  public makeLove(): number {\n    let bornCount = 0;\n\n    if (this.population.length <= 1) {\n      return bornCount;\n    } else {\n      for (let i = this.population.length - 1; i >= 0; i--) {\n        const human = this.population[i];\n        // get other random human\n        const mate = this.getRandomHuman(i);\n        if (this.isLoveFruitful(human, mate)) {\n          const baby = new Human(human, mate);\n          this.population.push(baby);\n          bornCount++;\n        }\n      }\n    }\n    return bornCount;\n  }\n\n  public getHuman(index: number): Human {\n    return this.population[index];\n  }\n\n  // returns a random human, potentially other than given index\n  public getRandomHuman(otherThan?: number): Human {\n    let randomIndex = generator.getRandomNumber(0, this.population.length - 1);\n    while (randomIndex === otherThan) {\n      randomIndex = generator.getRandomNumber(0, this.population.length - 1);\n    }\n    return this.population[randomIndex];\n  }\n\n  // checks if two humans are able to love each other and if are able to get pregnant\n  private isLoveFruitful(human1: Human, human2: Human): boolean {\n    return Human.getBabyChance(human1, human2) > generator.getRandomPercent();\n  }\n\n  private generateInitialPopulation(initialPopulation: number): void {\n    for (let i = 0; i < initialPopulation; i++) {\n      this.population.push(new Human());\n    }\n  }\n}\n","import { logger } from \"./logger\";\nimport { Humans } from \"./humans\";\nimport { generator } from \"./generator\";\n\ndeclare global {\n  interface String {\n    padEnd(maxLength: number, fillString?: string): string;\n  }\n}\n\ninterface ICatastrophe {\n  type: string;\n  killMin: number;\n  killMax: number;\n}\n\nexport enum PopulationStatus {\n  Extinct = -1,\n  Struggling = 0,\n  Safe = 1\n}\n\nexport class Existence {\n  // https://en.wikipedia.org/wiki/Minimum_viable_population\n  private static readonly initialPopulation: number = 4169;\n  private static readonly yearTime: number = 0.1 * 1000; // seconds\n\n  private static readonly catastrophes: ICatastrophe[] = [\n    // meteor - https://en.wikipedia.org/wiki/Chicxulub_crater\n    { type: \"☄️\", killMin: 0, killMax: 75 },\n    // plague - https://en.wikipedia.org/wiki/Black_Death\n    { type: \"🤢\", killMin: 30, killMax: 60 },\n    // famine - https://en.wikipedia.org/wiki/List_of_natural_disasters_by_death_toll\n    { type: \"🏜\", killMin: 10, killMax: 28 },\n    // ice age\n    { type: \"❄️\", killMin: 16, killMax: 20 },\n    // flood\n    { type: \"🌊\", killMin: 3, killMax: 13 },\n    // wildfire\n    { type: \"🔥\", killMin: 11, killMax: 12 },\n    // volcano eruption\n    { type: \"🌋\", killMin: 1, killMax: 9 },\n    // cyclone\n    { type: \"🌪\", killMin: 6, killMax: 6 },\n    // war - https://en.m.wikipedia.org/wiki/World_War_II_casualties\n    { type: \"⚔️\", killMin: 2, killMax: 3 },\n    // religion - https://rationalwiki.org/wiki/Death_toll_of_Christianity\n    { type: \"⛪\", killMin: 1, killMax: 2 }\n  ];\n\n  private targetPopulation: number;\n  private humans: Humans;\n  private lifeIntervalId: number = 0;\n  private currentYear: number = 0;\n  private isLoggingEnabled: boolean = false;\n\n  public constructor(targetPopulation: number, enableLogging: boolean) {\n    this.targetPopulation = targetPopulation;\n    this.humans = new Humans(Existence.initialPopulation);\n    this.isLoggingEnabled = enableLogging;\n    if (this.isLoggingEnabled) {\n      logger.log(`${this.humans.getTotalCount()} humans appeared.`);\n    }\n  }\n\n  public startLife(): void {\n    this.lifeIntervalId = window.setInterval(\n      this.simulateOneYear.bind(this),\n      Existence.yearTime\n    );\n  }\n\n  public simulateOneYear(): void {\n    this.bumpYear();\n\n    const initialCount = this.humans.getTotalCount();\n\n    const bornCount = this.humans.makeLove();\n\n    const buriedCount = this.humans.buryDead();\n\n    const appliedCatastrophe = this.applyRandomCatastrophe();\n    const catastropheDeadCount = Math.abs(\n      this.humans.getTotalCount() + buriedCount - bornCount - initialCount\n    );\n\n    if (this.isLoggingEnabled) {\n      this.logYear(\n        bornCount,\n        appliedCatastrophe,\n        buriedCount + catastropheDeadCount\n      );\n    }\n\n    this.checkGoals();\n  }\n\n  public getPopulationStatus(): PopulationStatus {\n    if (this.humans.getTotalCount() === 0) {\n      return PopulationStatus.Extinct;\n    } else if (this.humans.getTotalCount() >= this.targetPopulation) {\n      return PopulationStatus.Safe;\n    } else {\n      return PopulationStatus.Struggling;\n    }\n  }\n\n  private logYear(\n    bornCount: number,\n    catastrophe: ICatastrophe | null,\n    deadCount: number\n  ): void {\n    // year\n    const messageParts = [`y${this.currentYear}`];\n\n    if (catastrophe === null) {\n      messageParts.push(`✝${deadCount}`);\n    } else {\n      messageParts.push(`${catastrophe.type}${deadCount}`);\n    }\n\n    messageParts.push(`❋${bornCount}`);\n\n    // current population\n    const totalCount = this.humans.getTotalCount();\n    if (deadCount > bornCount) {\n      messageParts.push(`<span class=\"negative\">&darr;${totalCount}</span>`);\n    } else if (bornCount > deadCount) {\n      messageParts.push(`<span class=\"positive\">&uarr;${totalCount}</span>`);\n    } else {\n      messageParts.push(`&middot;${totalCount}`);\n    }\n\n    const groupsCount = this.humans.getAgeGroupsCount();\n    messageParts.push(`(👶${groupsCount.baby} 👩${groupsCount.adult})`);\n\n    // final message\n    logger.log(messageParts.join(\" \"));\n  }\n\n  private bumpYear(): void {\n    this.currentYear++;\n    this.humans.growByOneYear();\n  }\n\n  // kills % of population (if happens)\n  private applyRandomCatastrophe(): ICatastrophe | null {\n    // every catastrophe has 1% chance of happening\n    if (Existence.catastrophes.length >= generator.getRandomPercent()) {\n      const catastrophe = this.getRandomCatastrophe();\n      const killPercentage = generator.getRandomNumber(catastrophe.killMin, catastrophe.killMax);\n      this.humans.killRandomHumans(this.humans.getTotalCount() * (killPercentage / 100));\n      return catastrophe;\n    } else {\n      return null;\n    }\n  }\n\n  private checkGoals(): void {\n    const status = this.getPopulationStatus();\n    if (status === PopulationStatus.Extinct) {\n      window.clearInterval(this.lifeIntervalId);\n      if (this.isLoggingEnabled) {\n        logger.log(\"All humans died.\");\n      }\n    } else if (status === PopulationStatus.Safe) {\n      window.clearInterval(this.lifeIntervalId);\n      if (this.isLoggingEnabled) {\n        logger.log(`Human population reached ${this.targetPopulation}. They're safe now.`);\n      }\n    }\n  }\n\n  private getRandomCatastrophe(): ICatastrophe {\n    return Existence.catastrophes[\n      generator.getRandomNumber(0, Existence.catastrophes.length - 1)\n    ];\n  }\n}\n","import { Existence } from \"./existence\";\n\nwindow.onload = (): void => {\n  const humanExistence = new Existence(1000000, true);\n  humanExistence.startLife();\n};\n"]}